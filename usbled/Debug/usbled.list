
usbled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006464  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006610  08006610  00016610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066a8  080066a8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080066a8  080066a8  000166a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066b0  080066b0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066b0  080066b0  000166b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066b4  080066b4  000166b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080066b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000190c  200001e4  0800689c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001af0  0800689c  00021af0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011dc2  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a7e  00000000  00000000  00031fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b18  00000000  00000000  00034a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009d0  00000000  00000000  00035570  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025432  00000000  00000000  00035f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c28b  00000000  00000000  0005b372  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2953  00000000  00000000  000675fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00139f50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cd0  00000000  00000000  00139fcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001e4 	.word	0x200001e4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080065f8 	.word	0x080065f8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001e8 	.word	0x200001e8
 80001e8:	080065f8 	.word	0x080065f8

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 f99a 	bl	8000838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f806 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f86e 	bl	80005e8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800050c:	f005 fa08 	bl	8005920 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	e7fe      	b.n	8000510 <main+0x14>
	...

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	; 0x50
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0320 	add.w	r3, r7, #32
 800051e:	2230      	movs	r2, #48	; 0x30
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f005 ffa6 	bl	8006474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	4b28      	ldr	r3, [pc, #160]	; (80005e0 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	4a27      	ldr	r2, [pc, #156]	; (80005e0 <SystemClock_Config+0xcc>)
 8000542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000546:	6413      	str	r3, [r2, #64]	; 0x40
 8000548:	4b25      	ldr	r3, [pc, #148]	; (80005e0 <SystemClock_Config+0xcc>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a21      	ldr	r2, [pc, #132]	; (80005e4 <SystemClock_Config+0xd0>)
 800055e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <SystemClock_Config+0xd0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000570:	2301      	movs	r3, #1
 8000572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000584:	2304      	movs	r3, #4
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000588:	23a8      	movs	r3, #168	; 0xa8
 800058a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000590:	2307      	movs	r3, #7
 8000592:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0320 	add.w	r3, r7, #32
 8000598:	4618      	mov	r0, r3
 800059a:	f001 fe55 	bl	8002248 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005a4:	f000 f872 	bl	800068c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	2302      	movs	r3, #2
 80005ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2105      	movs	r1, #5
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 f8ae 	bl	8002728 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005d2:	f000 f85b 	bl	800068c <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3750      	adds	r7, #80	; 0x50
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40007000 	.word	0x40007000

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b20      	ldr	r3, [pc, #128]	; (8000684 <MX_GPIO_Init+0x9c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a1f      	ldr	r2, [pc, #124]	; (8000684 <MX_GPIO_Init+0x9c>)
 8000608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <MX_GPIO_Init+0x9c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_GPIO_Init+0x9c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a18      	ldr	r2, [pc, #96]	; (8000684 <MX_GPIO_Init+0x9c>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_GPIO_Init+0x9c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_GPIO_Init+0x9c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a11      	ldr	r2, [pc, #68]	; (8000684 <MX_GPIO_Init+0x9c>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_GPIO_Init+0x9c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f244 0181 	movw	r1, #16513	; 0x4081
 8000658:	480b      	ldr	r0, [pc, #44]	; (8000688 <MX_GPIO_Init+0xa0>)
 800065a:	f000 fc3d 	bl	8000ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 800065e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	4619      	mov	r1, r3
 8000676:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_GPIO_Init+0xa0>)
 8000678:	f000 fa84 	bl	8000b84 <HAL_GPIO_Init>

}
 800067c:	bf00      	nop
 800067e:	3720      	adds	r7, #32
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40020400 	.word	0x40020400

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000692:	e7fe      	b.n	8000692 <Error_Handler+0x6>

08000694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <HAL_MspInit+0x4c>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a2:	4a0f      	ldr	r2, [pc, #60]	; (80006e0 <HAL_MspInit+0x4c>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6453      	str	r3, [r2, #68]	; 0x44
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_MspInit+0x4c>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <HAL_MspInit+0x4c>)
 80006bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006be:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <HAL_MspInit+0x4c>)
 80006c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c4:	6413      	str	r3, [r2, #64]	; 0x40
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_MspInit+0x4c>)
 80006c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800

080006e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <NMI_Handler+0x4>

080006ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <HardFault_Handler+0x4>

080006f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <MemManage_Handler+0x4>

080006f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <BusFault_Handler+0x4>

080006fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <UsageFault_Handler+0x4>

08000702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000730:	f000 f8d4 	bl	80008dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800073c:	4802      	ldr	r0, [pc, #8]	; (8000748 <OTG_FS_IRQHandler+0x10>)
 800073e:	f000 fd4f 	bl	80011e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200016e4 	.word	0x200016e4

0800074c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000754:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <_sbrk+0x5c>)
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <_sbrk+0x60>)
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <_sbrk+0x64>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d102      	bne.n	800076e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <_sbrk+0x64>)
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <_sbrk+0x68>)
 800076c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <_sbrk+0x64>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	693a      	ldr	r2, [r7, #16]
 8000778:	429a      	cmp	r2, r3
 800077a:	d207      	bcs.n	800078c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800077c:	f005 fe40 	bl	8006400 <__errno>
 8000780:	4602      	mov	r2, r0
 8000782:	230c      	movs	r3, #12
 8000784:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	e009      	b.n	80007a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <_sbrk+0x64>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <_sbrk+0x64>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <_sbrk+0x64>)
 800079c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800079e:	68fb      	ldr	r3, [r7, #12]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20030000 	.word	0x20030000
 80007ac:	00000400 	.word	0x00000400
 80007b0:	20000200 	.word	0x20000200
 80007b4:	20001af0 	.word	0x20001af0

080007b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <SystemInit+0x28>)
 80007be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007c2:	4a07      	ldr	r2, [pc, #28]	; (80007e0 <SystemInit+0x28>)
 80007c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <SystemInit+0x28>)
 80007ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007d2:	609a      	str	r2, [r3, #8]
#endif
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80007e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800081c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80007e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80007ea:	e003      	b.n	80007f4 <LoopCopyDataInit>

080007ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80007ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80007f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80007f2:	3104      	adds	r1, #4

080007f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80007f4:	480b      	ldr	r0, [pc, #44]	; (8000824 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80007f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80007fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80007fc:	d3f6      	bcc.n	80007ec <CopyDataInit>
  ldr  r2, =_sbss
 80007fe:	4a0b      	ldr	r2, [pc, #44]	; (800082c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000800:	e002      	b.n	8000808 <LoopFillZerobss>

08000802 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000802:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000804:	f842 3b04 	str.w	r3, [r2], #4

08000808 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800080a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800080c:	d3f9      	bcc.n	8000802 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800080e:	f7ff ffd3 	bl	80007b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000812:	f005 fdfb 	bl	800640c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000816:	f7ff fe71 	bl	80004fc <main>
  bx  lr    
 800081a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800081c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000820:	080066b8 	.word	0x080066b8
  ldr  r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000828:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 800082c:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000830:	20001af0 	.word	0x20001af0

08000834 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000834:	e7fe      	b.n	8000834 <ADC_IRQHandler>
	...

08000838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <HAL_Init+0x40>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <HAL_Init+0x40>)
 8000842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000846:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <HAL_Init+0x40>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <HAL_Init+0x40>)
 800084e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000852:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <HAL_Init+0x40>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a07      	ldr	r2, [pc, #28]	; (8000878 <HAL_Init+0x40>)
 800085a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800085e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000860:	2003      	movs	r0, #3
 8000862:	f000 f94d 	bl	8000b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000866:	2000      	movs	r0, #0
 8000868:	f000 f808 	bl	800087c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800086c:	f7ff ff12 	bl	8000694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023c00 	.word	0x40023c00

0800087c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <HAL_InitTick+0x54>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <HAL_InitTick+0x58>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	4619      	mov	r1, r3
 800088e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000892:	fbb3 f3f1 	udiv	r3, r3, r1
 8000896:	fbb2 f3f3 	udiv	r3, r2, r3
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f965 	bl	8000b6a <HAL_SYSTICK_Config>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	e00e      	b.n	80008c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	d80a      	bhi.n	80008c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b0:	2200      	movs	r2, #0
 80008b2:	6879      	ldr	r1, [r7, #4]
 80008b4:	f04f 30ff 	mov.w	r0, #4294967295
 80008b8:	f000 f92d 	bl	8000b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008bc:	4a06      	ldr	r2, [pc, #24]	; (80008d8 <HAL_InitTick+0x5c>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008c2:	2300      	movs	r3, #0
 80008c4:	e000      	b.n	80008c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000000 	.word	0x20000000
 80008d4:	20000008 	.word	0x20000008
 80008d8:	20000004 	.word	0x20000004

080008dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_IncTick+0x20>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_IncTick+0x24>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4413      	add	r3, r2
 80008ec:	4a04      	ldr	r2, [pc, #16]	; (8000900 <HAL_IncTick+0x24>)
 80008ee:	6013      	str	r3, [r2, #0]
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20000008 	.word	0x20000008
 8000900:	20000210 	.word	0x20000210

08000904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return uwTick;
 8000908:	4b03      	ldr	r3, [pc, #12]	; (8000918 <HAL_GetTick+0x14>)
 800090a:	681b      	ldr	r3, [r3, #0]
}
 800090c:	4618      	mov	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	20000210 	.word	0x20000210

0800091c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000924:	f7ff ffee 	bl	8000904 <HAL_GetTick>
 8000928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000934:	d005      	beq.n	8000942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_Delay+0x40>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4413      	add	r3, r2
 8000940:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000942:	bf00      	nop
 8000944:	f7ff ffde 	bl	8000904 <HAL_GetTick>
 8000948:	4602      	mov	r2, r0
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	429a      	cmp	r2, r3
 8000952:	d8f7      	bhi.n	8000944 <HAL_Delay+0x28>
  {
  }
}
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000008 	.word	0x20000008

08000960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800097c:	4013      	ands	r3, r2
 800097e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800098c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000992:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	60d3      	str	r3, [r2, #12]
}
 8000998:	bf00      	nop
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	f003 0307 	and.w	r3, r3, #7
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	db0b      	blt.n	80009ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	f003 021f 	and.w	r2, r3, #31
 80009dc:	4907      	ldr	r1, [pc, #28]	; (80009fc <__NVIC_EnableIRQ+0x38>)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	095b      	lsrs	r3, r3, #5
 80009e4:	2001      	movs	r0, #1
 80009e6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000e100 	.word	0xe000e100

08000a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	db0a      	blt.n	8000a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	490c      	ldr	r1, [pc, #48]	; (8000a4c <__NVIC_SetPriority+0x4c>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	0112      	lsls	r2, r2, #4
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	440b      	add	r3, r1
 8000a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a28:	e00a      	b.n	8000a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4908      	ldr	r1, [pc, #32]	; (8000a50 <__NVIC_SetPriority+0x50>)
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	f003 030f 	and.w	r3, r3, #15
 8000a36:	3b04      	subs	r3, #4
 8000a38:	0112      	lsls	r2, r2, #4
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	440b      	add	r3, r1
 8000a3e:	761a      	strb	r2, [r3, #24]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000e100 	.word	0xe000e100
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b089      	sub	sp, #36	; 0x24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	f1c3 0307 	rsb	r3, r3, #7
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	bf28      	it	cs
 8000a72:	2304      	movcs	r3, #4
 8000a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3304      	adds	r3, #4
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d902      	bls.n	8000a84 <NVIC_EncodePriority+0x30>
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3b03      	subs	r3, #3
 8000a82:	e000      	b.n	8000a86 <NVIC_EncodePriority+0x32>
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	f04f 32ff 	mov.w	r2, #4294967295
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43da      	mvns	r2, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	401a      	ands	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	43d9      	mvns	r1, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	4313      	orrs	r3, r2
         );
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3724      	adds	r7, #36	; 0x24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
	...

08000abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000acc:	d301      	bcc.n	8000ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00f      	b.n	8000af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <SysTick_Config+0x40>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ada:	210f      	movs	r1, #15
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	f7ff ff8e 	bl	8000a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <SysTick_Config+0x40>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aea:	4b04      	ldr	r3, [pc, #16]	; (8000afc <SysTick_Config+0x40>)
 8000aec:	2207      	movs	r2, #7
 8000aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	e000e010 	.word	0xe000e010

08000b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff ff29 	bl	8000960 <__NVIC_SetPriorityGrouping>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b086      	sub	sp, #24
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
 8000b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b28:	f7ff ff3e 	bl	80009a8 <__NVIC_GetPriorityGrouping>
 8000b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	68b9      	ldr	r1, [r7, #8]
 8000b32:	6978      	ldr	r0, [r7, #20]
 8000b34:	f7ff ff8e 	bl	8000a54 <NVIC_EncodePriority>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff5d 	bl	8000a00 <__NVIC_SetPriority>
}
 8000b46:	bf00      	nop
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	4603      	mov	r3, r0
 8000b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff31 	bl	80009c4 <__NVIC_EnableIRQ>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff ffa2 	bl	8000abc <SysTick_Config>
 8000b78:	4603      	mov	r3, r0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b089      	sub	sp, #36	; 0x24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
 8000b9e:	e177      	b.n	8000e90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	697a      	ldr	r2, [r7, #20]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	f040 8166 	bne.w	8000e8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d00b      	beq.n	8000bde <HAL_GPIO_Init+0x5a>
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d007      	beq.n	8000bde <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bd2:	2b11      	cmp	r3, #17
 8000bd4:	d003      	beq.n	8000bde <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2b12      	cmp	r3, #18
 8000bdc:	d130      	bne.n	8000c40 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	2203      	movs	r2, #3
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	68da      	ldr	r2, [r3, #12]
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c14:	2201      	movs	r2, #1
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	4013      	ands	r3, r2
 8000c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	091b      	lsrs	r3, r3, #4
 8000c2a:	f003 0201 	and.w	r2, r3, #1
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4013      	ands	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d003      	beq.n	8000c80 <HAL_GPIO_Init+0xfc>
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2b12      	cmp	r3, #18
 8000c7e:	d123      	bne.n	8000cc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	08da      	lsrs	r2, r3, #3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3208      	adds	r2, #8
 8000c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	f003 0307 	and.w	r3, r3, #7
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	220f      	movs	r2, #15
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	691a      	ldr	r2, [r3, #16]
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	08da      	lsrs	r2, r3, #3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3208      	adds	r2, #8
 8000cc2:	69b9      	ldr	r1, [r7, #24]
 8000cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 0203 	and.w	r2, r3, #3
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 80c0 	beq.w	8000e8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	4b65      	ldr	r3, [pc, #404]	; (8000ea4 <HAL_GPIO_Init+0x320>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a64      	ldr	r2, [pc, #400]	; (8000ea4 <HAL_GPIO_Init+0x320>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b62      	ldr	r3, [pc, #392]	; (8000ea4 <HAL_GPIO_Init+0x320>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d26:	4a60      	ldr	r2, [pc, #384]	; (8000ea8 <HAL_GPIO_Init+0x324>)
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	f003 0303 	and.w	r3, r3, #3
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	220f      	movs	r2, #15
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4013      	ands	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a57      	ldr	r2, [pc, #348]	; (8000eac <HAL_GPIO_Init+0x328>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d037      	beq.n	8000dc2 <HAL_GPIO_Init+0x23e>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a56      	ldr	r2, [pc, #344]	; (8000eb0 <HAL_GPIO_Init+0x32c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d031      	beq.n	8000dbe <HAL_GPIO_Init+0x23a>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a55      	ldr	r2, [pc, #340]	; (8000eb4 <HAL_GPIO_Init+0x330>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d02b      	beq.n	8000dba <HAL_GPIO_Init+0x236>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a54      	ldr	r2, [pc, #336]	; (8000eb8 <HAL_GPIO_Init+0x334>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d025      	beq.n	8000db6 <HAL_GPIO_Init+0x232>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a53      	ldr	r2, [pc, #332]	; (8000ebc <HAL_GPIO_Init+0x338>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d01f      	beq.n	8000db2 <HAL_GPIO_Init+0x22e>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a52      	ldr	r2, [pc, #328]	; (8000ec0 <HAL_GPIO_Init+0x33c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d019      	beq.n	8000dae <HAL_GPIO_Init+0x22a>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a51      	ldr	r2, [pc, #324]	; (8000ec4 <HAL_GPIO_Init+0x340>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d013      	beq.n	8000daa <HAL_GPIO_Init+0x226>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a50      	ldr	r2, [pc, #320]	; (8000ec8 <HAL_GPIO_Init+0x344>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d00d      	beq.n	8000da6 <HAL_GPIO_Init+0x222>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4f      	ldr	r2, [pc, #316]	; (8000ecc <HAL_GPIO_Init+0x348>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d007      	beq.n	8000da2 <HAL_GPIO_Init+0x21e>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4e      	ldr	r2, [pc, #312]	; (8000ed0 <HAL_GPIO_Init+0x34c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d101      	bne.n	8000d9e <HAL_GPIO_Init+0x21a>
 8000d9a:	2309      	movs	r3, #9
 8000d9c:	e012      	b.n	8000dc4 <HAL_GPIO_Init+0x240>
 8000d9e:	230a      	movs	r3, #10
 8000da0:	e010      	b.n	8000dc4 <HAL_GPIO_Init+0x240>
 8000da2:	2308      	movs	r3, #8
 8000da4:	e00e      	b.n	8000dc4 <HAL_GPIO_Init+0x240>
 8000da6:	2307      	movs	r3, #7
 8000da8:	e00c      	b.n	8000dc4 <HAL_GPIO_Init+0x240>
 8000daa:	2306      	movs	r3, #6
 8000dac:	e00a      	b.n	8000dc4 <HAL_GPIO_Init+0x240>
 8000dae:	2305      	movs	r3, #5
 8000db0:	e008      	b.n	8000dc4 <HAL_GPIO_Init+0x240>
 8000db2:	2304      	movs	r3, #4
 8000db4:	e006      	b.n	8000dc4 <HAL_GPIO_Init+0x240>
 8000db6:	2303      	movs	r3, #3
 8000db8:	e004      	b.n	8000dc4 <HAL_GPIO_Init+0x240>
 8000dba:	2302      	movs	r3, #2
 8000dbc:	e002      	b.n	8000dc4 <HAL_GPIO_Init+0x240>
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e000      	b.n	8000dc4 <HAL_GPIO_Init+0x240>
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	69fa      	ldr	r2, [r7, #28]
 8000dc6:	f002 0203 	and.w	r2, r2, #3
 8000dca:	0092      	lsls	r2, r2, #2
 8000dcc:	4093      	lsls	r3, r2
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dd4:	4934      	ldr	r1, [pc, #208]	; (8000ea8 <HAL_GPIO_Init+0x324>)
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	089b      	lsrs	r3, r3, #2
 8000dda:	3302      	adds	r3, #2
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000de2:	4b3c      	ldr	r3, [pc, #240]	; (8000ed4 <HAL_GPIO_Init+0x350>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e06:	4a33      	ldr	r2, [pc, #204]	; (8000ed4 <HAL_GPIO_Init+0x350>)
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e0c:	4b31      	ldr	r3, [pc, #196]	; (8000ed4 <HAL_GPIO_Init+0x350>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d003      	beq.n	8000e30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e30:	4a28      	ldr	r2, [pc, #160]	; (8000ed4 <HAL_GPIO_Init+0x350>)
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e36:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <HAL_GPIO_Init+0x350>)
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e5a:	4a1e      	ldr	r2, [pc, #120]	; (8000ed4 <HAL_GPIO_Init+0x350>)
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <HAL_GPIO_Init+0x350>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d003      	beq.n	8000e84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e84:	4a13      	ldr	r2, [pc, #76]	; (8000ed4 <HAL_GPIO_Init+0x350>)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	2b0f      	cmp	r3, #15
 8000e94:	f67f ae84 	bls.w	8000ba0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e98:	bf00      	nop
 8000e9a:	3724      	adds	r7, #36	; 0x24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40013800 	.word	0x40013800
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	40020400 	.word	0x40020400
 8000eb4:	40020800 	.word	0x40020800
 8000eb8:	40020c00 	.word	0x40020c00
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40021400 	.word	0x40021400
 8000ec4:	40021800 	.word	0x40021800
 8000ec8:	40021c00 	.word	0x40021c00
 8000ecc:	40022000 	.word	0x40022000
 8000ed0:	40022400 	.word	0x40022400
 8000ed4:	40013c00 	.word	0x40013c00

08000ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	807b      	strh	r3, [r7, #2]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ee8:	787b      	ldrb	r3, [r7, #1]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eee:	887a      	ldrh	r2, [r7, #2]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ef4:	e003      	b.n	8000efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ef6:	887b      	ldrh	r3, [r7, #2]
 8000ef8:	041a      	lsls	r2, r3, #16
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	619a      	str	r2, [r3, #24]
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	460b      	mov	r3, r1
 8000f14:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	695a      	ldr	r2, [r3, #20]
 8000f1a:	887b      	ldrh	r3, [r7, #2]
 8000f1c:	401a      	ands	r2, r3
 8000f1e:	887b      	ldrh	r3, [r7, #2]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d104      	bne.n	8000f2e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f24:	887b      	ldrh	r3, [r7, #2]
 8000f26:	041a      	lsls	r2, r3, #16
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000f2c:	e002      	b.n	8000f34 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000f2e:	887a      	ldrh	r2, [r7, #2]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	619a      	str	r2, [r3, #24]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f42:	b08f      	sub	sp, #60	; 0x3c
 8000f44:	af0a      	add	r7, sp, #40	; 0x28
 8000f46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e10f      	b.n	8001172 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d106      	bne.n	8000f72 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f004 ff4b 	bl	8005e08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2203      	movs	r2, #3
 8000f76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d102      	bne.n	8000f8c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 fea8 	bl	8002ce6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	687e      	ldr	r6, [r7, #4]
 8000f9e:	466d      	mov	r5, sp
 8000fa0:	f106 0410 	add.w	r4, r6, #16
 8000fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000faa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fb4:	1d33      	adds	r3, r6, #4
 8000fb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fb8:	6838      	ldr	r0, [r7, #0]
 8000fba:	f001 fd7f 	bl	8002abc <USB_CoreInit>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d005      	beq.n	8000fd0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e0d0      	b.n	8001172 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f001 fe96 	bl	8002d08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]
 8000fe0:	e04a      	b.n	8001078 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	1a9b      	subs	r3, r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	333d      	adds	r3, #61	; 0x3d
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	1a9b      	subs	r3, r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	440b      	add	r3, r1
 8001004:	333c      	adds	r3, #60	; 0x3c
 8001006:	7bfa      	ldrb	r2, [r7, #15]
 8001008:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800100a:	7bfa      	ldrb	r2, [r7, #15]
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	b298      	uxth	r0, r3
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	1a9b      	subs	r3, r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	3342      	adds	r3, #66	; 0x42
 800101e:	4602      	mov	r2, r0
 8001020:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	1a9b      	subs	r3, r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	333f      	adds	r3, #63	; 0x3f
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	1a9b      	subs	r3, r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	440b      	add	r3, r1
 8001044:	3344      	adds	r3, #68	; 0x44
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	1a9b      	subs	r3, r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	3348      	adds	r3, #72	; 0x48
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800105e:	7bfa      	ldrb	r2, [r7, #15]
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	1a9b      	subs	r3, r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	440b      	add	r3, r1
 800106c:	3350      	adds	r3, #80	; 0x50
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	3301      	adds	r3, #1
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	429a      	cmp	r2, r3
 8001080:	d3af      	bcc.n	8000fe2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001082:	2300      	movs	r3, #0
 8001084:	73fb      	strb	r3, [r7, #15]
 8001086:	e044      	b.n	8001112 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001088:	7bfa      	ldrb	r2, [r7, #15]
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	4613      	mov	r3, r2
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	1a9b      	subs	r3, r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	1a9b      	subs	r3, r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	440b      	add	r3, r1
 80010ac:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	1a9b      	subs	r3, r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010ca:	7bfa      	ldrb	r2, [r7, #15]
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	1a9b      	subs	r3, r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	1a9b      	subs	r3, r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	1a9b      	subs	r3, r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	440b      	add	r3, r1
 8001104:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	3301      	adds	r3, #1
 8001110:	73fb      	strb	r3, [r7, #15]
 8001112:	7bfa      	ldrb	r2, [r7, #15]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	429a      	cmp	r2, r3
 800111a:	d3b5      	bcc.n	8001088 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	687e      	ldr	r6, [r7, #4]
 8001124:	466d      	mov	r5, sp
 8001126:	f106 0410 	add.w	r4, r6, #16
 800112a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800112c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800112e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001132:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001136:	e885 0003 	stmia.w	r5, {r0, r1}
 800113a:	1d33      	adds	r3, r6, #4
 800113c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800113e:	6838      	ldr	r0, [r7, #0]
 8001140:	f001 fe0c 	bl	8002d5c <USB_DevInit>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d005      	beq.n	8001156 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2202      	movs	r2, #2
 800114e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e00d      	b.n	8001172 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f002 fe54 	bl	8003e18 <USB_DevDisconnect>

  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800117a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b084      	sub	sp, #16
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800118e:	2b01      	cmp	r3, #1
 8001190:	d101      	bne.n	8001196 <HAL_PCD_Start+0x1c>
 8001192:	2302      	movs	r3, #2
 8001194:	e020      	b.n	80011d8 <HAL_PCD_Start+0x5e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d109      	bne.n	80011ba <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d005      	beq.n	80011ba <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 fd80 	bl	8002cc4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f002 fe04 	bl	8003dd6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b08d      	sub	sp, #52	; 0x34
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011ee:	6a3b      	ldr	r3, [r7, #32]
 80011f0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 fec2 	bl	8003f80 <USB_GetMode>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f040 839d 	bne.w	800193e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f002 fe26 	bl	8003e5a <USB_ReadInterrupts>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 8393 	beq.w	800193c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f002 fe1d 	bl	8003e5a <USB_ReadInterrupts>
 8001220:	4603      	mov	r3, r0
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b02      	cmp	r3, #2
 8001228:	d107      	bne.n	800123a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	695a      	ldr	r2, [r3, #20]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f002 0202 	and.w	r2, r2, #2
 8001238:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f002 fe0b 	bl	8003e5a <USB_ReadInterrupts>
 8001244:	4603      	mov	r3, r0
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	2b10      	cmp	r3, #16
 800124c:	d161      	bne.n	8001312 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	699a      	ldr	r2, [r3, #24]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0210 	bic.w	r2, r2, #16
 800125c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	f003 020f 	and.w	r2, r3, #15
 800126a:	4613      	mov	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	1a9b      	subs	r3, r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	3304      	adds	r3, #4
 800127c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	0c5b      	lsrs	r3, r3, #17
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	2b02      	cmp	r3, #2
 8001288:	d124      	bne.n	80012d4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001290:	4013      	ands	r3, r2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d035      	beq.n	8001302 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	091b      	lsrs	r3, r3, #4
 800129e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	461a      	mov	r2, r3
 80012a8:	6a38      	ldr	r0, [r7, #32]
 80012aa:	f002 fc71 	bl	8003b90 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	091b      	lsrs	r3, r3, #4
 80012b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ba:	441a      	add	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	699a      	ldr	r2, [r3, #24]
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	091b      	lsrs	r3, r3, #4
 80012c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012cc:	441a      	add	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	619a      	str	r2, [r3, #24]
 80012d2:	e016      	b.n	8001302 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	0c5b      	lsrs	r3, r3, #17
 80012d8:	f003 030f 	and.w	r3, r3, #15
 80012dc:	2b06      	cmp	r3, #6
 80012de:	d110      	bne.n	8001302 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80012e6:	2208      	movs	r2, #8
 80012e8:	4619      	mov	r1, r3
 80012ea:	6a38      	ldr	r0, [r7, #32]
 80012ec:	f002 fc50 	bl	8003b90 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	699a      	ldr	r2, [r3, #24]
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	091b      	lsrs	r3, r3, #4
 80012f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012fc:	441a      	add	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	699a      	ldr	r2, [r3, #24]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f042 0210 	orr.w	r2, r2, #16
 8001310:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f002 fd9f 	bl	8003e5a <USB_ReadInterrupts>
 800131c:	4603      	mov	r3, r0
 800131e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001322:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001326:	d16e      	bne.n	8001406 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f002 fda5 	bl	8003e80 <USB_ReadDevAllOutEpInterrupt>
 8001336:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001338:	e062      	b.n	8001400 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800133a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d057      	beq.n	80013f4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f002 fdca 	bl	8003ee8 <USB_ReadDevOutEPInterrupt>
 8001354:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00c      	beq.n	800137a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	015a      	lsls	r2, r3, #5
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	4413      	add	r3, r2
 8001368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800136c:	461a      	mov	r2, r3
 800136e:	2301      	movs	r3, #1
 8001370:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001372:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 fdb1 	bl	8001edc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	f003 0308 	and.w	r3, r3, #8
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00c      	beq.n	800139e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001386:	015a      	lsls	r2, r3, #5
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	4413      	add	r3, r2
 800138c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001390:	461a      	mov	r2, r3
 8001392:	2308      	movs	r3, #8
 8001394:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001396:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 feab 	bl	80020f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	f003 0310 	and.w	r3, r3, #16
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d008      	beq.n	80013ba <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	015a      	lsls	r2, r3, #5
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	4413      	add	r3, r2
 80013b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013b4:	461a      	mov	r2, r3
 80013b6:	2310      	movs	r3, #16
 80013b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	f003 0320 	and.w	r3, r3, #32
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d008      	beq.n	80013d6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	015a      	lsls	r2, r3, #5
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	4413      	add	r3, r2
 80013cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013d0:	461a      	mov	r2, r3
 80013d2:	2320      	movs	r3, #32
 80013d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d009      	beq.n	80013f4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	015a      	lsls	r2, r3, #5
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	4413      	add	r3, r2
 80013e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ec:	461a      	mov	r2, r3
 80013ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	3301      	adds	r3, #1
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fc:	085b      	lsrs	r3, r3, #1
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001402:	2b00      	cmp	r3, #0
 8001404:	d199      	bne.n	800133a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f002 fd25 	bl	8003e5a <USB_ReadInterrupts>
 8001410:	4603      	mov	r3, r0
 8001412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001416:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800141a:	f040 80c0 	bne.w	800159e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f002 fd46 	bl	8003eb4 <USB_ReadDevAllInEpInterrupt>
 8001428:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800142a:	2300      	movs	r3, #0
 800142c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800142e:	e0b2      	b.n	8001596 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 80a7 	beq.w	800158a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f002 fd6c 	bl	8003f24 <USB_ReadDevInEPInterrupt>
 800144c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	d057      	beq.n	8001508 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	2201      	movs	r2, #1
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800146c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43db      	mvns	r3, r3
 8001472:	69f9      	ldr	r1, [r7, #28]
 8001474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001478:	4013      	ands	r3, r2
 800147a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	015a      	lsls	r2, r3, #5
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	4413      	add	r3, r2
 8001484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001488:	461a      	mov	r2, r3
 800148a:	2301      	movs	r3, #1
 800148c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d132      	bne.n	80014fc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149a:	4613      	mov	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	1a9b      	subs	r3, r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	440b      	add	r3, r1
 80014a4:	3348      	adds	r3, #72	; 0x48
 80014a6:	6819      	ldr	r1, [r3, #0]
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ac:	4613      	mov	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	1a9b      	subs	r3, r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4403      	add	r3, r0
 80014b6:	3344      	adds	r3, #68	; 0x44
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4419      	add	r1, r3
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c0:	4613      	mov	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	1a9b      	subs	r3, r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4403      	add	r3, r0
 80014ca:	3348      	adds	r3, #72	; 0x48
 80014cc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d113      	bne.n	80014fc <HAL_PCD_IRQHandler+0x31c>
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d8:	4613      	mov	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	1a9b      	subs	r3, r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	3350      	adds	r3, #80	; 0x50
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d108      	bne.n	80014fc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80014f4:	461a      	mov	r2, r3
 80014f6:	2101      	movs	r1, #1
 80014f8:	f002 fd74 	bl	8003fe4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	4619      	mov	r1, r3
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f004 fd01 	bl	8005f0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d008      	beq.n	8001524 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	015a      	lsls	r2, r3, #5
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	4413      	add	r3, r2
 800151a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800151e:	461a      	mov	r2, r3
 8001520:	2308      	movs	r3, #8
 8001522:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	2b00      	cmp	r3, #0
 800152c:	d008      	beq.n	8001540 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	015a      	lsls	r2, r3, #5
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	4413      	add	r3, r2
 8001536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800153a:	461a      	mov	r2, r3
 800153c:	2310      	movs	r3, #16
 800153e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001546:	2b00      	cmp	r3, #0
 8001548:	d008      	beq.n	800155c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	015a      	lsls	r2, r3, #5
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	4413      	add	r3, r2
 8001552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001556:	461a      	mov	r2, r3
 8001558:	2340      	movs	r3, #64	; 0x40
 800155a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d008      	beq.n	8001578 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	015a      	lsls	r2, r3, #5
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	4413      	add	r3, r2
 800156e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001572:	461a      	mov	r2, r3
 8001574:	2302      	movs	r3, #2
 8001576:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001582:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 fc1b 	bl	8001dc0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	3301      	adds	r3, #1
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001592:	085b      	lsrs	r3, r3, #1
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001598:	2b00      	cmp	r3, #0
 800159a:	f47f af49 	bne.w	8001430 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f002 fc59 	bl	8003e5a <USB_ReadInterrupts>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015b2:	d122      	bne.n	80015fa <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015c2:	f023 0301 	bic.w	r3, r3, #1
 80015c6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d108      	bne.n	80015e4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015da:	2100      	movs	r1, #0
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 fe27 	bl	8002230 <HAL_PCDEx_LPM_Callback>
 80015e2:	e002      	b.n	80015ea <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f004 fd07 	bl	8005ff8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	695a      	ldr	r2, [r3, #20]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80015f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f002 fc2b 	bl	8003e5a <USB_ReadInterrupts>
 8001604:	4603      	mov	r3, r0
 8001606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800160a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800160e:	d112      	bne.n	8001636 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b01      	cmp	r3, #1
 800161e:	d102      	bne.n	8001626 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f004 fcc3 	bl	8005fac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	695a      	ldr	r2, [r3, #20]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001634:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f002 fc0d 	bl	8003e5a <USB_ReadInterrupts>
 8001640:	4603      	mov	r3, r0
 8001642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800164a:	f040 80c7 	bne.w	80017dc <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800165c:	f023 0301 	bic.w	r3, r3, #1
 8001660:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2110      	movs	r1, #16
 8001668:	4618      	mov	r0, r3
 800166a:	f001 fcdb 	bl	8003024 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800166e:	2300      	movs	r3, #0
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001672:	e056      	b.n	8001722 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001676:	015a      	lsls	r2, r3, #5
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	4413      	add	r3, r2
 800167c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001680:	461a      	mov	r2, r3
 8001682:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001686:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168a:	015a      	lsls	r2, r3, #5
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	4413      	add	r3, r2
 8001690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001698:	0151      	lsls	r1, r2, #5
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	440a      	add	r2, r1
 800169e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016a6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80016a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016aa:	015a      	lsls	r2, r3, #5
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	4413      	add	r3, r2
 80016b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016b8:	0151      	lsls	r1, r2, #5
 80016ba:	69fa      	ldr	r2, [r7, #28]
 80016bc:	440a      	add	r2, r1
 80016be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80016c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ca:	015a      	lsls	r2, r3, #5
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	4413      	add	r3, r2
 80016d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016d4:	461a      	mov	r2, r3
 80016d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80016dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016de:	015a      	lsls	r2, r3, #5
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	4413      	add	r3, r2
 80016e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ec:	0151      	lsls	r1, r2, #5
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	440a      	add	r2, r1
 80016f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80016fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fe:	015a      	lsls	r2, r3, #5
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	4413      	add	r3, r2
 8001704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800170c:	0151      	lsls	r1, r2, #5
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	440a      	add	r2, r1
 8001712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001716:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800171a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800171c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171e:	3301      	adds	r3, #1
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001728:	429a      	cmp	r2, r3
 800172a:	d3a3      	bcc.n	8001674 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	69fa      	ldr	r2, [r7, #28]
 8001736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800173a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800173e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	2b00      	cmp	r3, #0
 8001746:	d016      	beq.n	8001776 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800174e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001758:	f043 030b 	orr.w	r3, r3, #11
 800175c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800176e:	f043 030b 	orr.w	r3, r3, #11
 8001772:	6453      	str	r3, [r2, #68]	; 0x44
 8001774:	e015      	b.n	80017a2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001784:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001788:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800178c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800179c:	f043 030b 	orr.w	r3, r3, #11
 80017a0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80017b4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017c6:	461a      	mov	r2, r3
 80017c8:	f002 fc0c 	bl	8003fe4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	695a      	ldr	r2, [r3, #20]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 fb3a 	bl	8003e5a <USB_ReadInterrupts>
 80017e6:	4603      	mov	r3, r0
 80017e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017f0:	d124      	bne.n	800183c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f002 fbd0 	bl	8003f9c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f001 fc70 	bl	80030e6 <USB_GetDevSpeed>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681c      	ldr	r4, [r3, #0]
 8001812:	f001 f947 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8001816:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800181c:	b2db      	uxtb	r3, r3
 800181e:	461a      	mov	r2, r3
 8001820:	4620      	mov	r0, r4
 8001822:	f001 f9ad 	bl	8002b80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f004 fb97 	bl	8005f5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800183a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f002 fb0a 	bl	8003e5a <USB_ReadInterrupts>
 8001846:	4603      	mov	r3, r0
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b08      	cmp	r3, #8
 800184e:	d10a      	bne.n	8001866 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f004 fb74 	bl	8005f3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	695a      	ldr	r2, [r3, #20]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f002 0208 	and.w	r2, r2, #8
 8001864:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f002 faf5 	bl	8003e5a <USB_ReadInterrupts>
 8001870:	4603      	mov	r3, r0
 8001872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800187a:	d10f      	bne.n	800189c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	b2db      	uxtb	r3, r3
 8001884:	4619      	mov	r1, r3
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f004 fbd6 	bl	8006038 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800189a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f002 fada 	bl	8003e5a <USB_ReadInterrupts>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018b0:	d10f      	bne.n	80018d2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	4619      	mov	r1, r3
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f004 fba9 	bl	8006014 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	695a      	ldr	r2, [r3, #20]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80018d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f002 fabf 	bl	8003e5a <USB_ReadInterrupts>
 80018dc:	4603      	mov	r3, r0
 80018de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e6:	d10a      	bne.n	80018fe <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f004 fbb7 	bl	800605c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	695a      	ldr	r2, [r3, #20]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80018fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f002 faa9 	bl	8003e5a <USB_ReadInterrupts>
 8001908:	4603      	mov	r3, r0
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	2b04      	cmp	r3, #4
 8001910:	d115      	bne.n	800193e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	d002      	beq.n	800192a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f004 fba7 	bl	8006078 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6859      	ldr	r1, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	430a      	orrs	r2, r1
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	e000      	b.n	800193e <HAL_PCD_IRQHandler+0x75e>
      return;
 800193c:	bf00      	nop
    }
  }
}
 800193e:	3734      	adds	r7, #52	; 0x34
 8001940:	46bd      	mov	sp, r7
 8001942:	bd90      	pop	{r4, r7, pc}

08001944 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_PCD_SetAddress+0x1a>
 800195a:	2302      	movs	r3, #2
 800195c:	e013      	b.n	8001986 <HAL_PCD_SetAddress+0x42>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	78fa      	ldrb	r2, [r7, #3]
 800196a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	78fa      	ldrb	r2, [r7, #3]
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f002 fa07 	bl	8003d8a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b084      	sub	sp, #16
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	4608      	mov	r0, r1
 8001998:	4611      	mov	r1, r2
 800199a:	461a      	mov	r2, r3
 800199c:	4603      	mov	r3, r0
 800199e:	70fb      	strb	r3, [r7, #3]
 80019a0:	460b      	mov	r3, r1
 80019a2:	803b      	strh	r3, [r7, #0]
 80019a4:	4613      	mov	r3, r2
 80019a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	da0f      	bge.n	80019d4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	f003 020f 	and.w	r2, r3, #15
 80019ba:	4613      	mov	r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	1a9b      	subs	r3, r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	3338      	adds	r3, #56	; 0x38
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	4413      	add	r3, r2
 80019c8:	3304      	adds	r3, #4
 80019ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2201      	movs	r2, #1
 80019d0:	705a      	strb	r2, [r3, #1]
 80019d2:	e00f      	b.n	80019f4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	f003 020f 	and.w	r2, r3, #15
 80019da:	4613      	mov	r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	1a9b      	subs	r3, r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	3304      	adds	r3, #4
 80019ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a00:	883a      	ldrh	r2, [r7, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	78ba      	ldrb	r2, [r7, #2]
 8001a0a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	785b      	ldrb	r3, [r3, #1]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d004      	beq.n	8001a1e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a1e:	78bb      	ldrb	r3, [r7, #2]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d102      	bne.n	8001a2a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <HAL_PCD_EP_Open+0xaa>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e00e      	b.n	8001a56 <HAL_PCD_EP_Open+0xc8>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68f9      	ldr	r1, [r7, #12]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f001 fb72 	bl	8003130 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001a54:	7afb      	ldrb	r3, [r7, #11]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b084      	sub	sp, #16
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	460b      	mov	r3, r1
 8001a68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	da0f      	bge.n	8001a92 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a72:	78fb      	ldrb	r3, [r7, #3]
 8001a74:	f003 020f 	and.w	r2, r3, #15
 8001a78:	4613      	mov	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	1a9b      	subs	r3, r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	3338      	adds	r3, #56	; 0x38
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	3304      	adds	r3, #4
 8001a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	705a      	strb	r2, [r3, #1]
 8001a90:	e00f      	b.n	8001ab2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	f003 020f 	and.w	r2, r3, #15
 8001a98:	4613      	mov	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	1a9b      	subs	r3, r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	f003 030f 	and.w	r3, r3, #15
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_PCD_EP_Close+0x6e>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e00e      	b.n	8001aea <HAL_PCD_EP_Close+0x8c>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68f9      	ldr	r1, [r7, #12]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f001 fbb0 	bl	8003240 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	460b      	mov	r3, r1
 8001b00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b02:	7afb      	ldrb	r3, [r7, #11]
 8001b04:	f003 020f 	and.w	r2, r3, #15
 8001b08:	4613      	mov	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	1a9b      	subs	r3, r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	3304      	adds	r3, #4
 8001b1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2200      	movs	r2, #0
 8001b32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b34:	7afb      	ldrb	r3, [r7, #11]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d102      	bne.n	8001b4e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b4e:	7afb      	ldrb	r3, [r7, #11]
 8001b50:	f003 030f 	and.w	r3, r3, #15
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d109      	bne.n	8001b6c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	461a      	mov	r2, r3
 8001b64:	6979      	ldr	r1, [r7, #20]
 8001b66:	f001 fe8b 	bl	8003880 <USB_EP0StartXfer>
 8001b6a:	e008      	b.n	8001b7e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	461a      	mov	r2, r3
 8001b78:	6979      	ldr	r1, [r7, #20]
 8001b7a:	f001 fc3d 	bl	80033f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	f003 020f 	and.w	r2, r3, #15
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bc8:	7afb      	ldrb	r3, [r7, #11]
 8001bca:	f003 020f 	and.w	r2, r3, #15
 8001bce:	4613      	mov	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	1a9b      	subs	r3, r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	3338      	adds	r3, #56	; 0x38
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	4413      	add	r3, r2
 8001bdc:	3304      	adds	r3, #4
 8001bde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bf8:	7afb      	ldrb	r3, [r7, #11]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d102      	bne.n	8001c12 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c12:	7afb      	ldrb	r3, [r7, #11]
 8001c14:	f003 030f 	and.w	r3, r3, #15
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d109      	bne.n	8001c30 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	6979      	ldr	r1, [r7, #20]
 8001c2a:	f001 fe29 	bl	8003880 <USB_EP0StartXfer>
 8001c2e:	e008      	b.n	8001c42 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	6979      	ldr	r1, [r7, #20]
 8001c3e:	f001 fbdb 	bl	80033f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	f003 020f 	and.w	r2, r3, #15
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d901      	bls.n	8001c6a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e050      	b.n	8001d0c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	da0f      	bge.n	8001c92 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	f003 020f 	and.w	r2, r3, #15
 8001c78:	4613      	mov	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	1a9b      	subs	r3, r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	3338      	adds	r3, #56	; 0x38
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	3304      	adds	r3, #4
 8001c88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	705a      	strb	r2, [r3, #1]
 8001c90:	e00d      	b.n	8001cae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c92:	78fa      	ldrb	r2, [r7, #3]
 8001c94:	4613      	mov	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	1a9b      	subs	r3, r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_PCD_EP_SetStall+0x82>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e01e      	b.n	8001d0c <HAL_PCD_EP_SetStall+0xc0>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68f9      	ldr	r1, [r7, #12]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f001 ff80 	bl	8003be2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	f003 030f 	and.w	r3, r3, #15
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10a      	bne.n	8001d02 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6818      	ldr	r0, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	b2d9      	uxtb	r1, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	f002 f971 	bl	8003fe4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	f003 020f 	and.w	r2, r3, #15
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d901      	bls.n	8001d32 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e042      	b.n	8001db8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	da0f      	bge.n	8001d5a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	f003 020f 	and.w	r2, r3, #15
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	3338      	adds	r3, #56	; 0x38
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3304      	adds	r3, #4
 8001d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2201      	movs	r2, #1
 8001d56:	705a      	strb	r2, [r3, #1]
 8001d58:	e00f      	b.n	8001d7a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	f003 020f 	and.w	r2, r3, #15
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	1a9b      	subs	r3, r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	4413      	add	r3, r2
 8001d70:	3304      	adds	r3, #4
 8001d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_PCD_EP_ClrStall+0x86>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e00e      	b.n	8001db8 <HAL_PCD_EP_ClrStall+0xa4>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68f9      	ldr	r1, [r7, #12]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f001 ff88 	bl	8003cbe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	1a9b      	subs	r3, r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	3338      	adds	r3, #56	; 0x38
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4413      	add	r3, r2
 8001de4:	3304      	adds	r3, #4
 8001de6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	699a      	ldr	r2, [r3, #24]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d901      	bls.n	8001df8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e06c      	b.n	8001ed2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	695a      	ldr	r2, [r3, #20]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	69fa      	ldr	r2, [r7, #28]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d902      	bls.n	8001e14 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	3303      	adds	r3, #3
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e1c:	e02b      	b.n	8001e76 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	695a      	ldr	r2, [r3, #20]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d902      	bls.n	8001e3a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3303      	adds	r3, #3
 8001e3e:	089b      	lsrs	r3, r3, #2
 8001e40:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	68d9      	ldr	r1, [r3, #12]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	4603      	mov	r3, r0
 8001e58:	6978      	ldr	r0, [r7, #20]
 8001e5a:	f001 fe64 	bl	8003b26 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	441a      	add	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	699a      	ldr	r2, [r3, #24]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	441a      	add	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	015a      	lsls	r2, r3, #5
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d809      	bhi.n	8001ea0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	699a      	ldr	r2, [r3, #24]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d203      	bcs.n	8001ea0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1be      	bne.n	8001e1e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	695a      	ldr	r2, [r3, #20]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d811      	bhi.n	8001ed0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	6939      	ldr	r1, [r7, #16]
 8001ec8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ecc:	4013      	ands	r3, r2
 8001ece:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3720      	adds	r7, #32
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	333c      	adds	r3, #60	; 0x3c
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	f040 80a0 	bne.w	8002054 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d015      	beq.n	8001f4a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4a72      	ldr	r2, [pc, #456]	; (80020ec <PCD_EP_OutXfrComplete_int+0x210>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	f240 80dd 	bls.w	80020e2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 80d7 	beq.w	80020e2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	015a      	lsls	r2, r3, #5
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f40:	461a      	mov	r2, r3
 8001f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f46:	6093      	str	r3, [r2, #8]
 8001f48:	e0cb      	b.n	80020e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f003 0320 	and.w	r3, r3, #32
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d009      	beq.n	8001f68 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f60:	461a      	mov	r2, r3
 8001f62:	2320      	movs	r3, #32
 8001f64:	6093      	str	r3, [r2, #8]
 8001f66:	e0bc      	b.n	80020e2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f040 80b7 	bne.w	80020e2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4a5d      	ldr	r2, [pc, #372]	; (80020ec <PCD_EP_OutXfrComplete_int+0x210>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d90f      	bls.n	8001f9c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00a      	beq.n	8001f9c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f92:	461a      	mov	r2, r3
 8001f94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f98:	6093      	str	r3, [r2, #8]
 8001f9a:	e0a2      	b.n	80020e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	1a9b      	subs	r3, r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001fae:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	0159      	lsls	r1, r3, #5
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001fc2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	1a9b      	subs	r3, r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4403      	add	r3, r0
 8001fd2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001fd6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	1a9b      	subs	r3, r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fea:	6819      	ldr	r1, [r3, #0]
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4403      	add	r3, r0
 8001ffa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4419      	add	r1, r3
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4403      	add	r3, r0
 8002010:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002014:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d114      	bne.n	8002046 <PCD_EP_OutXfrComplete_int+0x16a>
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	4613      	mov	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	1a9b      	subs	r3, r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d108      	bne.n	8002046 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800203e:	461a      	mov	r2, r3
 8002040:	2101      	movs	r1, #1
 8002042:	f001 ffcf 	bl	8003fe4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	4619      	mov	r1, r3
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f003 ff41 	bl	8005ed4 <HAL_PCD_DataOutStageCallback>
 8002052:	e046      	b.n	80020e2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4a26      	ldr	r2, [pc, #152]	; (80020f0 <PCD_EP_OutXfrComplete_int+0x214>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d124      	bne.n	80020a6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4413      	add	r3, r2
 800206e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002072:	461a      	mov	r2, r3
 8002074:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002078:	6093      	str	r3, [r2, #8]
 800207a:	e032      	b.n	80020e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	2b00      	cmp	r3, #0
 8002084:	d008      	beq.n	8002098 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4413      	add	r3, r2
 800208e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002092:	461a      	mov	r2, r3
 8002094:	2320      	movs	r3, #32
 8002096:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	4619      	mov	r1, r3
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f003 ff18 	bl	8005ed4 <HAL_PCD_DataOutStageCallback>
 80020a4:	e01d      	b.n	80020e2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d114      	bne.n	80020d6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	4613      	mov	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	1a9b      	subs	r3, r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d108      	bne.n	80020d6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020ce:	461a      	mov	r2, r3
 80020d0:	2100      	movs	r1, #0
 80020d2:	f001 ff87 	bl	8003fe4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	4619      	mov	r1, r3
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f003 fef9 	bl	8005ed4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	4f54300a 	.word	0x4f54300a
 80020f0:	4f54310a 	.word	0x4f54310a

080020f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	333c      	adds	r3, #60	; 0x3c
 800210c:	3304      	adds	r3, #4
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4413      	add	r3, r2
 800211a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4a15      	ldr	r2, [pc, #84]	; (800217c <PCD_EP_OutSetupPacket_int+0x88>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d90e      	bls.n	8002148 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002130:	2b00      	cmp	r3, #0
 8002132:	d009      	beq.n	8002148 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	015a      	lsls	r2, r3, #5
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4413      	add	r3, r2
 800213c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002140:	461a      	mov	r2, r3
 8002142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002146:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f003 feb1 	bl	8005eb0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4a0a      	ldr	r2, [pc, #40]	; (800217c <PCD_EP_OutSetupPacket_int+0x88>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d90c      	bls.n	8002170 <PCD_EP_OutSetupPacket_int+0x7c>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d108      	bne.n	8002170 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002168:	461a      	mov	r2, r3
 800216a:	2101      	movs	r1, #1
 800216c:	f001 ff3a 	bl	8003fe4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	4f54300a 	.word	0x4f54300a

08002180 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	70fb      	strb	r3, [r7, #3]
 800218c:	4613      	mov	r3, r2
 800218e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d107      	bne.n	80021ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800219e:	883b      	ldrh	r3, [r7, #0]
 80021a0:	0419      	lsls	r1, r3, #16
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	629a      	str	r2, [r3, #40]	; 0x28
 80021ac:	e028      	b.n	8002200 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	0c1b      	lsrs	r3, r3, #16
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	4413      	add	r3, r2
 80021ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021bc:	2300      	movs	r3, #0
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	e00d      	b.n	80021de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	3340      	adds	r3, #64	; 0x40
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	0c1b      	lsrs	r3, r3, #16
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	4413      	add	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	3301      	adds	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d3ec      	bcc.n	80021c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80021e8:	883b      	ldrh	r3, [r7, #0]
 80021ea:	0418      	lsls	r0, r3, #16
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6819      	ldr	r1, [r3, #0]
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	4302      	orrs	r2, r0
 80021f8:	3340      	adds	r3, #64	; 0x40
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	460b      	mov	r3, r1
 8002218:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e25b      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d075      	beq.n	8002352 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002266:	4ba3      	ldr	r3, [pc, #652]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b04      	cmp	r3, #4
 8002270:	d00c      	beq.n	800228c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002272:	4ba0      	ldr	r3, [pc, #640]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800227a:	2b08      	cmp	r3, #8
 800227c:	d112      	bne.n	80022a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800227e:	4b9d      	ldr	r3, [pc, #628]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002286:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800228a:	d10b      	bne.n	80022a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	4b99      	ldr	r3, [pc, #612]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d05b      	beq.n	8002350 <HAL_RCC_OscConfig+0x108>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d157      	bne.n	8002350 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e236      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ac:	d106      	bne.n	80022bc <HAL_RCC_OscConfig+0x74>
 80022ae:	4b91      	ldr	r3, [pc, #580]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a90      	ldr	r2, [pc, #576]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e01d      	b.n	80022f8 <HAL_RCC_OscConfig+0xb0>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x98>
 80022c6:	4b8b      	ldr	r3, [pc, #556]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a8a      	ldr	r2, [pc, #552]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4b88      	ldr	r3, [pc, #544]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a87      	ldr	r2, [pc, #540]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e00b      	b.n	80022f8 <HAL_RCC_OscConfig+0xb0>
 80022e0:	4b84      	ldr	r3, [pc, #528]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a83      	ldr	r2, [pc, #524]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b81      	ldr	r3, [pc, #516]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a80      	ldr	r2, [pc, #512]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80022f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7fe fb00 	bl	8000904 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002308:	f7fe fafc 	bl	8000904 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	; 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e1fb      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231a:	4b76      	ldr	r3, [pc, #472]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0xc0>
 8002326:	e014      	b.n	8002352 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7fe faec 	bl	8000904 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002330:	f7fe fae8 	bl	8000904 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b64      	cmp	r3, #100	; 0x64
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e1e7      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002342:	4b6c      	ldr	r3, [pc, #432]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0xe8>
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d063      	beq.n	8002426 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800235e:	4b65      	ldr	r3, [pc, #404]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800236a:	4b62      	ldr	r3, [pc, #392]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002372:	2b08      	cmp	r3, #8
 8002374:	d11c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002376:	4b5f      	ldr	r3, [pc, #380]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d116      	bne.n	80023b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	4b5c      	ldr	r3, [pc, #368]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <HAL_RCC_OscConfig+0x152>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d001      	beq.n	800239a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e1bb      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239a:	4b56      	ldr	r3, [pc, #344]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4952      	ldr	r1, [pc, #328]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ae:	e03a      	b.n	8002426 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d020      	beq.n	80023fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b8:	4b4f      	ldr	r3, [pc, #316]	; (80024f8 <HAL_RCC_OscConfig+0x2b0>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023be:	f7fe faa1 	bl	8000904 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c6:	f7fe fa9d 	bl	8000904 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e19c      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d8:	4b46      	ldr	r3, [pc, #280]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e4:	4b43      	ldr	r3, [pc, #268]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4940      	ldr	r1, [pc, #256]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]
 80023f8:	e015      	b.n	8002426 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fa:	4b3f      	ldr	r3, [pc, #252]	; (80024f8 <HAL_RCC_OscConfig+0x2b0>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7fe fa80 	bl	8000904 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002408:	f7fe fa7c 	bl	8000904 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e17b      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241a:	4b36      	ldr	r3, [pc, #216]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d030      	beq.n	8002494 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d016      	beq.n	8002468 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800243a:	4b30      	ldr	r3, [pc, #192]	; (80024fc <HAL_RCC_OscConfig+0x2b4>)
 800243c:	2201      	movs	r2, #1
 800243e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002440:	f7fe fa60 	bl	8000904 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002448:	f7fe fa5c 	bl	8000904 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e15b      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800245a:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x200>
 8002466:	e015      	b.n	8002494 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002468:	4b24      	ldr	r3, [pc, #144]	; (80024fc <HAL_RCC_OscConfig+0x2b4>)
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246e:	f7fe fa49 	bl	8000904 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002476:	f7fe fa45 	bl	8000904 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e144      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002488:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 800248a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1f0      	bne.n	8002476 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80a0 	beq.w	80025e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a2:	2300      	movs	r3, #0
 80024a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10f      	bne.n	80024d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c0:	6413      	str	r3, [r2, #64]	; 0x40
 80024c2:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ce:	2301      	movs	r3, #1
 80024d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_RCC_OscConfig+0x2b8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d121      	bne.n	8002522 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_RCC_OscConfig+0x2b8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a07      	ldr	r2, [pc, #28]	; (8002500 <HAL_RCC_OscConfig+0x2b8>)
 80024e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ea:	f7fe fa0b 	bl	8000904 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f0:	e011      	b.n	8002516 <HAL_RCC_OscConfig+0x2ce>
 80024f2:	bf00      	nop
 80024f4:	40023800 	.word	0x40023800
 80024f8:	42470000 	.word	0x42470000
 80024fc:	42470e80 	.word	0x42470e80
 8002500:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002504:	f7fe f9fe 	bl	8000904 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e0fd      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002516:	4b81      	ldr	r3, [pc, #516]	; (800271c <HAL_RCC_OscConfig+0x4d4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d106      	bne.n	8002538 <HAL_RCC_OscConfig+0x2f0>
 800252a:	4b7d      	ldr	r3, [pc, #500]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252e:	4a7c      	ldr	r2, [pc, #496]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6713      	str	r3, [r2, #112]	; 0x70
 8002536:	e01c      	b.n	8002572 <HAL_RCC_OscConfig+0x32a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b05      	cmp	r3, #5
 800253e:	d10c      	bne.n	800255a <HAL_RCC_OscConfig+0x312>
 8002540:	4b77      	ldr	r3, [pc, #476]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002544:	4a76      	ldr	r2, [pc, #472]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002546:	f043 0304 	orr.w	r3, r3, #4
 800254a:	6713      	str	r3, [r2, #112]	; 0x70
 800254c:	4b74      	ldr	r3, [pc, #464]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 800254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002550:	4a73      	ldr	r2, [pc, #460]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6713      	str	r3, [r2, #112]	; 0x70
 8002558:	e00b      	b.n	8002572 <HAL_RCC_OscConfig+0x32a>
 800255a:	4b71      	ldr	r3, [pc, #452]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 800255c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255e:	4a70      	ldr	r2, [pc, #448]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002560:	f023 0301 	bic.w	r3, r3, #1
 8002564:	6713      	str	r3, [r2, #112]	; 0x70
 8002566:	4b6e      	ldr	r3, [pc, #440]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	4a6d      	ldr	r2, [pc, #436]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 800256c:	f023 0304 	bic.w	r3, r3, #4
 8002570:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d015      	beq.n	80025a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257a:	f7fe f9c3 	bl	8000904 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002580:	e00a      	b.n	8002598 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7fe f9bf 	bl	8000904 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002590:	4293      	cmp	r3, r2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e0bc      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002598:	4b61      	ldr	r3, [pc, #388]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0ee      	beq.n	8002582 <HAL_RCC_OscConfig+0x33a>
 80025a4:	e014      	b.n	80025d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a6:	f7fe f9ad 	bl	8000904 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f7fe f9a9 	bl	8000904 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e0a6      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c4:	4b56      	ldr	r3, [pc, #344]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ee      	bne.n	80025ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d105      	bne.n	80025e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d6:	4b52      	ldr	r3, [pc, #328]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	4a51      	ldr	r2, [pc, #324]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 80025dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8092 	beq.w	8002710 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ec:	4b4c      	ldr	r3, [pc, #304]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d05c      	beq.n	80026b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d141      	bne.n	8002684 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002600:	4b48      	ldr	r3, [pc, #288]	; (8002724 <HAL_RCC_OscConfig+0x4dc>)
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7fe f97d 	bl	8000904 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800260e:	f7fe f979 	bl	8000904 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e078      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002620:	4b3f      	ldr	r3, [pc, #252]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f0      	bne.n	800260e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69da      	ldr	r2, [r3, #28]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	019b      	lsls	r3, r3, #6
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002642:	085b      	lsrs	r3, r3, #1
 8002644:	3b01      	subs	r3, #1
 8002646:	041b      	lsls	r3, r3, #16
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264e:	061b      	lsls	r3, r3, #24
 8002650:	4933      	ldr	r1, [pc, #204]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002656:	4b33      	ldr	r3, [pc, #204]	; (8002724 <HAL_RCC_OscConfig+0x4dc>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7fe f952 	bl	8000904 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002664:	f7fe f94e 	bl	8000904 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e04d      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002676:	4b2a      	ldr	r3, [pc, #168]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x41c>
 8002682:	e045      	b.n	8002710 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002684:	4b27      	ldr	r3, [pc, #156]	; (8002724 <HAL_RCC_OscConfig+0x4dc>)
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268a:	f7fe f93b 	bl	8000904 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002692:	f7fe f937 	bl	8000904 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e036      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a4:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f0      	bne.n	8002692 <HAL_RCC_OscConfig+0x44a>
 80026b0:	e02e      	b.n	8002710 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e029      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026be:	4b18      	ldr	r3, [pc, #96]	; (8002720 <HAL_RCC_OscConfig+0x4d8>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d11c      	bne.n	800270c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026dc:	429a      	cmp	r2, r3
 80026de:	d115      	bne.n	800270c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026e6:	4013      	ands	r3, r2
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d10d      	bne.n	800270c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d106      	bne.n	800270c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40007000 	.word	0x40007000
 8002720:	40023800 	.word	0x40023800
 8002724:	42470060 	.word	0x42470060

08002728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0cc      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800273c:	4b68      	ldr	r3, [pc, #416]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 030f 	and.w	r3, r3, #15
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d90c      	bls.n	8002764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b65      	ldr	r3, [pc, #404]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b63      	ldr	r3, [pc, #396]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0b8      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d020      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800277c:	4b59      	ldr	r3, [pc, #356]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a58      	ldr	r2, [pc, #352]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002786:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002794:	4b53      	ldr	r3, [pc, #332]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	4a52      	ldr	r2, [pc, #328]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800279e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a0:	4b50      	ldr	r3, [pc, #320]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	494d      	ldr	r1, [pc, #308]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d044      	beq.n	8002848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c6:	4b47      	ldr	r3, [pc, #284]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d119      	bne.n	8002806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e07f      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d003      	beq.n	80027e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e6:	4b3f      	ldr	r3, [pc, #252]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e06f      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f6:	4b3b      	ldr	r3, [pc, #236]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e067      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002806:	4b37      	ldr	r3, [pc, #220]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f023 0203 	bic.w	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4934      	ldr	r1, [pc, #208]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	4313      	orrs	r3, r2
 8002816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002818:	f7fe f874 	bl	8000904 <HAL_GetTick>
 800281c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	e00a      	b.n	8002836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002820:	f7fe f870 	bl	8000904 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f241 3288 	movw	r2, #5000	; 0x1388
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e04f      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002836:	4b2b      	ldr	r3, [pc, #172]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 020c 	and.w	r2, r3, #12
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	429a      	cmp	r2, r3
 8002846:	d1eb      	bne.n	8002820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002848:	4b25      	ldr	r3, [pc, #148]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d20c      	bcs.n	8002870 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002856:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e032      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4916      	ldr	r1, [pc, #88]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	4313      	orrs	r3, r2
 800288c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d009      	beq.n	80028ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	490e      	ldr	r1, [pc, #56]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ae:	f000 f821 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 80028b2:	4601      	mov	r1, r0
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 80028c0:	5cd3      	ldrb	r3, [r2, r3]
 80028c2:	fa21 f303 	lsr.w	r3, r1, r3
 80028c6:	4a09      	ldr	r2, [pc, #36]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fd ffd4 	bl	800087c <HAL_InitTick>

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40023c00 	.word	0x40023c00
 80028e4:	40023800 	.word	0x40023800
 80028e8:	08006698 	.word	0x08006698
 80028ec:	20000000 	.word	0x20000000
 80028f0:	20000004 	.word	0x20000004

080028f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	2300      	movs	r3, #0
 8002904:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800290a:	4b63      	ldr	r3, [pc, #396]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	2b04      	cmp	r3, #4
 8002914:	d007      	beq.n	8002926 <HAL_RCC_GetSysClockFreq+0x32>
 8002916:	2b08      	cmp	r3, #8
 8002918:	d008      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0x38>
 800291a:	2b00      	cmp	r3, #0
 800291c:	f040 80b4 	bne.w	8002a88 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002920:	4b5e      	ldr	r3, [pc, #376]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002922:	60bb      	str	r3, [r7, #8]
       break;
 8002924:	e0b3      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002926:	4b5e      	ldr	r3, [pc, #376]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002928:	60bb      	str	r3, [r7, #8]
      break;
 800292a:	e0b0      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800292c:	4b5a      	ldr	r3, [pc, #360]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002934:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002936:	4b58      	ldr	r3, [pc, #352]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d04a      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002942:	4b55      	ldr	r3, [pc, #340]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	099b      	lsrs	r3, r3, #6
 8002948:	f04f 0400 	mov.w	r4, #0
 800294c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	ea03 0501 	and.w	r5, r3, r1
 8002958:	ea04 0602 	and.w	r6, r4, r2
 800295c:	4629      	mov	r1, r5
 800295e:	4632      	mov	r2, r6
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	f04f 0400 	mov.w	r4, #0
 8002968:	0154      	lsls	r4, r2, #5
 800296a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800296e:	014b      	lsls	r3, r1, #5
 8002970:	4619      	mov	r1, r3
 8002972:	4622      	mov	r2, r4
 8002974:	1b49      	subs	r1, r1, r5
 8002976:	eb62 0206 	sbc.w	r2, r2, r6
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	f04f 0400 	mov.w	r4, #0
 8002982:	0194      	lsls	r4, r2, #6
 8002984:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002988:	018b      	lsls	r3, r1, #6
 800298a:	1a5b      	subs	r3, r3, r1
 800298c:	eb64 0402 	sbc.w	r4, r4, r2
 8002990:	f04f 0100 	mov.w	r1, #0
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	00e2      	lsls	r2, r4, #3
 800299a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800299e:	00d9      	lsls	r1, r3, #3
 80029a0:	460b      	mov	r3, r1
 80029a2:	4614      	mov	r4, r2
 80029a4:	195b      	adds	r3, r3, r5
 80029a6:	eb44 0406 	adc.w	r4, r4, r6
 80029aa:	f04f 0100 	mov.w	r1, #0
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	0262      	lsls	r2, r4, #9
 80029b4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80029b8:	0259      	lsls	r1, r3, #9
 80029ba:	460b      	mov	r3, r1
 80029bc:	4614      	mov	r4, r2
 80029be:	4618      	mov	r0, r3
 80029c0:	4621      	mov	r1, r4
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f04f 0400 	mov.w	r4, #0
 80029c8:	461a      	mov	r2, r3
 80029ca:	4623      	mov	r3, r4
 80029cc:	f7fd fc16 	bl	80001fc <__aeabi_uldivmod>
 80029d0:	4603      	mov	r3, r0
 80029d2:	460c      	mov	r4, r1
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	e049      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d8:	4b2f      	ldr	r3, [pc, #188]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	099b      	lsrs	r3, r3, #6
 80029de:	f04f 0400 	mov.w	r4, #0
 80029e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	ea03 0501 	and.w	r5, r3, r1
 80029ee:	ea04 0602 	and.w	r6, r4, r2
 80029f2:	4629      	mov	r1, r5
 80029f4:	4632      	mov	r2, r6
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	f04f 0400 	mov.w	r4, #0
 80029fe:	0154      	lsls	r4, r2, #5
 8002a00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a04:	014b      	lsls	r3, r1, #5
 8002a06:	4619      	mov	r1, r3
 8002a08:	4622      	mov	r2, r4
 8002a0a:	1b49      	subs	r1, r1, r5
 8002a0c:	eb62 0206 	sbc.w	r2, r2, r6
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	f04f 0400 	mov.w	r4, #0
 8002a18:	0194      	lsls	r4, r2, #6
 8002a1a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a1e:	018b      	lsls	r3, r1, #6
 8002a20:	1a5b      	subs	r3, r3, r1
 8002a22:	eb64 0402 	sbc.w	r4, r4, r2
 8002a26:	f04f 0100 	mov.w	r1, #0
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	00e2      	lsls	r2, r4, #3
 8002a30:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a34:	00d9      	lsls	r1, r3, #3
 8002a36:	460b      	mov	r3, r1
 8002a38:	4614      	mov	r4, r2
 8002a3a:	195b      	adds	r3, r3, r5
 8002a3c:	eb44 0406 	adc.w	r4, r4, r6
 8002a40:	f04f 0100 	mov.w	r1, #0
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	02a2      	lsls	r2, r4, #10
 8002a4a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a4e:	0299      	lsls	r1, r3, #10
 8002a50:	460b      	mov	r3, r1
 8002a52:	4614      	mov	r4, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	4621      	mov	r1, r4
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f04f 0400 	mov.w	r4, #0
 8002a5e:	461a      	mov	r2, r3
 8002a60:	4623      	mov	r3, r4
 8002a62:	f7fd fbcb 	bl	80001fc <__aeabi_uldivmod>
 8002a66:	4603      	mov	r3, r0
 8002a68:	460c      	mov	r4, r1
 8002a6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	0c1b      	lsrs	r3, r3, #16
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	3301      	adds	r3, #1
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a84:	60bb      	str	r3, [r7, #8]
      break;
 8002a86:	e002      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a8a:	60bb      	str	r3, [r7, #8]
      break;
 8002a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	00f42400 	.word	0x00f42400
 8002aa0:	007a1200 	.word	0x007a1200

08002aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	20000000 	.word	0x20000000

08002abc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002abc:	b084      	sub	sp, #16
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	f107 001c 	add.w	r0, r7, #28
 8002aca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d122      	bne.n	8002b1a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d105      	bne.n	8002b0e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f001 fac6 	bl	80040a0 <USB_CoreReset>
 8002b14:	4603      	mov	r3, r0
 8002b16:	73fb      	strb	r3, [r7, #15]
 8002b18:	e01a      	b.n	8002b50 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f001 faba 	bl	80040a0 <USB_CoreReset>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	639a      	str	r2, [r3, #56]	; 0x38
 8002b42:	e005      	b.n	8002b50 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d10b      	bne.n	8002b6e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f043 0206 	orr.w	r2, r3, #6
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f043 0220 	orr.w	r2, r3, #32
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b7a:	b004      	add	sp, #16
 8002b7c:	4770      	bx	lr
	...

08002b80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d165      	bne.n	8002c60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4a41      	ldr	r2, [pc, #260]	; (8002c9c <USB_SetTurnaroundTime+0x11c>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d906      	bls.n	8002baa <USB_SetTurnaroundTime+0x2a>
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4a40      	ldr	r2, [pc, #256]	; (8002ca0 <USB_SetTurnaroundTime+0x120>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d802      	bhi.n	8002baa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002ba4:	230f      	movs	r3, #15
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	e062      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	4a3c      	ldr	r2, [pc, #240]	; (8002ca0 <USB_SetTurnaroundTime+0x120>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d906      	bls.n	8002bc0 <USB_SetTurnaroundTime+0x40>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	4a3b      	ldr	r2, [pc, #236]	; (8002ca4 <USB_SetTurnaroundTime+0x124>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d802      	bhi.n	8002bc0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002bba:	230e      	movs	r3, #14
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	e057      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4a38      	ldr	r2, [pc, #224]	; (8002ca4 <USB_SetTurnaroundTime+0x124>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d906      	bls.n	8002bd6 <USB_SetTurnaroundTime+0x56>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4a37      	ldr	r2, [pc, #220]	; (8002ca8 <USB_SetTurnaroundTime+0x128>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d802      	bhi.n	8002bd6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002bd0:	230d      	movs	r3, #13
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	e04c      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	4a33      	ldr	r2, [pc, #204]	; (8002ca8 <USB_SetTurnaroundTime+0x128>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d906      	bls.n	8002bec <USB_SetTurnaroundTime+0x6c>
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	4a32      	ldr	r2, [pc, #200]	; (8002cac <USB_SetTurnaroundTime+0x12c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d802      	bhi.n	8002bec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002be6:	230c      	movs	r3, #12
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	e041      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4a2f      	ldr	r2, [pc, #188]	; (8002cac <USB_SetTurnaroundTime+0x12c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d906      	bls.n	8002c02 <USB_SetTurnaroundTime+0x82>
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4a2e      	ldr	r2, [pc, #184]	; (8002cb0 <USB_SetTurnaroundTime+0x130>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d802      	bhi.n	8002c02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002bfc:	230b      	movs	r3, #11
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	e036      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	4a2a      	ldr	r2, [pc, #168]	; (8002cb0 <USB_SetTurnaroundTime+0x130>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d906      	bls.n	8002c18 <USB_SetTurnaroundTime+0x98>
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4a29      	ldr	r2, [pc, #164]	; (8002cb4 <USB_SetTurnaroundTime+0x134>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d802      	bhi.n	8002c18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002c12:	230a      	movs	r3, #10
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	e02b      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4a26      	ldr	r2, [pc, #152]	; (8002cb4 <USB_SetTurnaroundTime+0x134>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d906      	bls.n	8002c2e <USB_SetTurnaroundTime+0xae>
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4a25      	ldr	r2, [pc, #148]	; (8002cb8 <USB_SetTurnaroundTime+0x138>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d802      	bhi.n	8002c2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002c28:	2309      	movs	r3, #9
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	e020      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	4a21      	ldr	r2, [pc, #132]	; (8002cb8 <USB_SetTurnaroundTime+0x138>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d906      	bls.n	8002c44 <USB_SetTurnaroundTime+0xc4>
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	4a20      	ldr	r2, [pc, #128]	; (8002cbc <USB_SetTurnaroundTime+0x13c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d802      	bhi.n	8002c44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002c3e:	2308      	movs	r3, #8
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	e015      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4a1d      	ldr	r2, [pc, #116]	; (8002cbc <USB_SetTurnaroundTime+0x13c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d906      	bls.n	8002c5a <USB_SetTurnaroundTime+0xda>
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4a1c      	ldr	r2, [pc, #112]	; (8002cc0 <USB_SetTurnaroundTime+0x140>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d802      	bhi.n	8002c5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002c54:	2307      	movs	r3, #7
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	e00a      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002c5a:	2306      	movs	r3, #6
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	e007      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002c66:	2309      	movs	r3, #9
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	e001      	b.n	8002c70 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002c6c:	2309      	movs	r3, #9
 8002c6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	029b      	lsls	r3, r3, #10
 8002c84:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	371c      	adds	r7, #28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	00d8acbf 	.word	0x00d8acbf
 8002ca0:	00e4e1bf 	.word	0x00e4e1bf
 8002ca4:	00f423ff 	.word	0x00f423ff
 8002ca8:	0106737f 	.word	0x0106737f
 8002cac:	011a499f 	.word	0x011a499f
 8002cb0:	01312cff 	.word	0x01312cff
 8002cb4:	014ca43f 	.word	0x014ca43f
 8002cb8:	016e35ff 	.word	0x016e35ff
 8002cbc:	01a6ab1f 	.word	0x01a6ab1f
 8002cc0:	01e847ff 	.word	0x01e847ff

08002cc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f043 0201 	orr.w	r2, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f023 0201 	bic.w	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d106      	bne.n	8002d34 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	e00b      	b.n	8002d4c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d106      	bne.n	8002d48 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	e001      	b.n	8002d4c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e003      	b.n	8002d54 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002d4c:	2032      	movs	r0, #50	; 0x32
 8002d4e:	f7fd fde5 	bl	800091c <HAL_Delay>

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b086      	sub	sp, #24
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	e009      	b.n	8002d90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	3340      	adds	r3, #64	; 0x40
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	2200      	movs	r2, #0
 8002d88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	2b0e      	cmp	r3, #14
 8002d94:	d9f2      	bls.n	8002d7c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d11c      	bne.n	8002dd6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002daa:	f043 0302 	orr.w	r3, r3, #2
 8002dae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dcc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	639a      	str	r2, [r3, #56]	; 0x38
 8002dd4:	e00b      	b.n	8002dee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dda:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002df4:	461a      	mov	r2, r3
 8002df6:	2300      	movs	r3, #0
 8002df8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e00:	4619      	mov	r1, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e08:	461a      	mov	r2, r3
 8002e0a:	680b      	ldr	r3, [r1, #0]
 8002e0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d10c      	bne.n	8002e2e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d104      	bne.n	8002e24 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f949 	bl	80030b4 <USB_SetDevSpeed>
 8002e22:	e008      	b.n	8002e36 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002e24:	2101      	movs	r1, #1
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f944 	bl	80030b4 <USB_SetDevSpeed>
 8002e2c:	e003      	b.n	8002e36 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002e2e:	2103      	movs	r1, #3
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f93f 	bl	80030b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002e36:	2110      	movs	r1, #16
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f8f3 	bl	8003024 <USB_FlushTxFifo>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f911 	bl	8003070 <USB_FlushRxFifo>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e5e:	461a      	mov	r2, r3
 8002e60:	2300      	movs	r3, #0
 8002e62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e76:	461a      	mov	r2, r3
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	e043      	b.n	8002f0a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e98:	d118      	bne.n	8002ecc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10a      	bne.n	8002eb6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eac:	461a      	mov	r2, r3
 8002eae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	e013      	b.n	8002ede <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e008      	b.n	8002ede <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ed8:	461a      	mov	r2, r3
 8002eda:	2300      	movs	r3, #0
 8002edc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eea:	461a      	mov	r2, r3
 8002eec:	2300      	movs	r3, #0
 8002eee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002efc:	461a      	mov	r2, r3
 8002efe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	3301      	adds	r3, #1
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d3b7      	bcc.n	8002e82 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	e043      	b.n	8002fa0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f2e:	d118      	bne.n	8002f62 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10a      	bne.n	8002f4c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f42:	461a      	mov	r2, r3
 8002f44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	e013      	b.n	8002f74 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	e008      	b.n	8002f74 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2300      	movs	r3, #0
 8002f72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f80:	461a      	mov	r2, r3
 8002f82:	2300      	movs	r3, #0
 8002f84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f92:	461a      	mov	r2, r3
 8002f94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d3b7      	bcc.n	8002f18 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002fc8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d105      	bne.n	8002fdc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f043 0210 	orr.w	r2, r3, #16
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699a      	ldr	r2, [r3, #24]
 8002fe0:	4b0f      	ldr	r3, [pc, #60]	; (8003020 <USB_DevInit+0x2c4>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f043 0208 	orr.w	r2, r3, #8
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d107      	bne.n	8003010 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003008:	f043 0304 	orr.w	r3, r3, #4
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003010:	7dfb      	ldrb	r3, [r7, #23]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800301c:	b004      	add	sp, #16
 800301e:	4770      	bx	lr
 8003020:	803c3800 	.word	0x803c3800

08003024 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	019b      	lsls	r3, r3, #6
 8003036:	f043 0220 	orr.w	r2, r3, #32
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	3301      	adds	r3, #1
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a09      	ldr	r2, [pc, #36]	; (800306c <USB_FlushTxFifo+0x48>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d901      	bls.n	8003050 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e006      	b.n	800305e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b20      	cmp	r3, #32
 800305a:	d0f0      	beq.n	800303e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	00030d40 	.word	0x00030d40

08003070 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2210      	movs	r2, #16
 8003080:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3301      	adds	r3, #1
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4a09      	ldr	r2, [pc, #36]	; (80030b0 <USB_FlushRxFifo+0x40>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d901      	bls.n	8003094 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e006      	b.n	80030a2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f003 0310 	and.w	r3, r3, #16
 800309c:	2b10      	cmp	r3, #16
 800309e:	d0f0      	beq.n	8003082 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	00030d40 	.word	0x00030d40

080030b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	68f9      	ldr	r1, [r7, #12]
 80030d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030d4:	4313      	orrs	r3, r2
 80030d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b087      	sub	sp, #28
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 0306 	and.w	r3, r3, #6
 80030fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d102      	bne.n	800310c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003106:	2300      	movs	r3, #0
 8003108:	75fb      	strb	r3, [r7, #23]
 800310a:	e00a      	b.n	8003122 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d002      	beq.n	8003118 <USB_GetDevSpeed+0x32>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2b06      	cmp	r3, #6
 8003116:	d102      	bne.n	800311e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003118:	2302      	movs	r3, #2
 800311a:	75fb      	strb	r3, [r7, #23]
 800311c:	e001      	b.n	8003122 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800311e:	230f      	movs	r3, #15
 8003120:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003122:	7dfb      	ldrb	r3, [r7, #23]
}
 8003124:	4618      	mov	r0, r3
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	785b      	ldrb	r3, [r3, #1]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d13a      	bne.n	80031c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003152:	69da      	ldr	r2, [r3, #28]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	2101      	movs	r1, #1
 800315e:	fa01 f303 	lsl.w	r3, r1, r3
 8003162:	b29b      	uxth	r3, r3
 8003164:	68f9      	ldr	r1, [r7, #12]
 8003166:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800316a:	4313      	orrs	r3, r2
 800316c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d155      	bne.n	8003230 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	78db      	ldrb	r3, [r3, #3]
 800319e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80031a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	059b      	lsls	r3, r3, #22
 80031a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80031a8:	4313      	orrs	r3, r2
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	0151      	lsls	r1, r2, #5
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	440a      	add	r2, r1
 80031b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	e036      	b.n	8003230 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c8:	69da      	ldr	r2, [r3, #28]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	2101      	movs	r1, #1
 80031d4:	fa01 f303 	lsl.w	r3, r1, r3
 80031d8:	041b      	lsls	r3, r3, #16
 80031da:	68f9      	ldr	r1, [r7, #12]
 80031dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d11a      	bne.n	8003230 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	78db      	ldrb	r3, [r3, #3]
 8003214:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003216:	430b      	orrs	r3, r1
 8003218:	4313      	orrs	r3, r2
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	0151      	lsls	r1, r2, #5
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	440a      	add	r2, r1
 8003222:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800322e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	785b      	ldrb	r3, [r3, #1]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d161      	bne.n	8003320 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800326e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003272:	d11f      	bne.n	80032b4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4413      	add	r3, r2
 800327c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	0151      	lsls	r1, r2, #5
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	440a      	add	r2, r1
 800328a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800328e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003292:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	0151      	lsls	r1, r2, #5
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	440a      	add	r2, r1
 80032aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	2101      	movs	r1, #1
 80032c6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	68f9      	ldr	r1, [r7, #12]
 80032d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032d4:	4013      	ands	r3, r2
 80032d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032de:	69da      	ldr	r2, [r3, #28]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	2101      	movs	r1, #1
 80032ea:	fa01 f303 	lsl.w	r3, r1, r3
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	68f9      	ldr	r1, [r7, #12]
 80032f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032f8:	4013      	ands	r3, r2
 80032fa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4413      	add	r3, r2
 8003304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	0159      	lsls	r1, r3, #5
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	440b      	add	r3, r1
 8003312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003316:	4619      	mov	r1, r3
 8003318:	4b35      	ldr	r3, [pc, #212]	; (80033f0 <USB_DeactivateEndpoint+0x1b0>)
 800331a:	4013      	ands	r3, r2
 800331c:	600b      	str	r3, [r1, #0]
 800331e:	e060      	b.n	80033e2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003332:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003336:	d11f      	bne.n	8003378 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	0151      	lsls	r1, r2, #5
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	440a      	add	r2, r1
 800334e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003352:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003356:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4413      	add	r3, r2
 8003360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	0151      	lsls	r1, r2, #5
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	440a      	add	r2, r1
 800336e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003372:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003376:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800337e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	2101      	movs	r1, #1
 800338a:	fa01 f303 	lsl.w	r3, r1, r3
 800338e:	041b      	lsls	r3, r3, #16
 8003390:	43db      	mvns	r3, r3
 8003392:	68f9      	ldr	r1, [r7, #12]
 8003394:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003398:	4013      	ands	r3, r2
 800339a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a2:	69da      	ldr	r2, [r3, #28]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	2101      	movs	r1, #1
 80033ae:	fa01 f303 	lsl.w	r3, r1, r3
 80033b2:	041b      	lsls	r3, r3, #16
 80033b4:	43db      	mvns	r3, r3
 80033b6:	68f9      	ldr	r1, [r7, #12]
 80033b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033bc:	4013      	ands	r3, r2
 80033be:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	0159      	lsls	r1, r3, #5
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	440b      	add	r3, r1
 80033d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033da:	4619      	mov	r1, r3
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <USB_DeactivateEndpoint+0x1b4>)
 80033de:	4013      	ands	r3, r2
 80033e0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	ec337800 	.word	0xec337800
 80033f4:	eff37800 	.word	0xeff37800

080033f8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	; 0x28
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	4613      	mov	r3, r2
 8003404:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	785b      	ldrb	r3, [r3, #1]
 8003414:	2b01      	cmp	r3, #1
 8003416:	f040 815c 	bne.w	80036d2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d132      	bne.n	8003488 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	4413      	add	r3, r2
 800342a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	0151      	lsls	r1, r2, #5
 8003434:	69fa      	ldr	r2, [r7, #28]
 8003436:	440a      	add	r2, r1
 8003438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800343c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003440:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003444:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	0151      	lsls	r1, r2, #5
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	440a      	add	r2, r1
 800345c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003460:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003464:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	4413      	add	r3, r2
 800346e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	0151      	lsls	r1, r2, #5
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	440a      	add	r2, r1
 800347c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003480:	0cdb      	lsrs	r3, r3, #19
 8003482:	04db      	lsls	r3, r3, #19
 8003484:	6113      	str	r3, [r2, #16]
 8003486:	e074      	b.n	8003572 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	0151      	lsls	r1, r2, #5
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	440a      	add	r2, r1
 800349e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034a2:	0cdb      	lsrs	r3, r3, #19
 80034a4:	04db      	lsls	r3, r3, #19
 80034a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	0151      	lsls	r1, r2, #5
 80034ba:	69fa      	ldr	r2, [r7, #28]
 80034bc:	440a      	add	r2, r1
 80034be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80034c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80034ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	6959      	ldr	r1, [r3, #20]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	440b      	add	r3, r1
 80034e4:	1e59      	subs	r1, r3, #1
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ee:	04d9      	lsls	r1, r3, #19
 80034f0:	4b9d      	ldr	r3, [pc, #628]	; (8003768 <USB_EPStartXfer+0x370>)
 80034f2:	400b      	ands	r3, r1
 80034f4:	69b9      	ldr	r1, [r7, #24]
 80034f6:	0148      	lsls	r0, r1, #5
 80034f8:	69f9      	ldr	r1, [r7, #28]
 80034fa:	4401      	add	r1, r0
 80034fc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003500:	4313      	orrs	r3, r2
 8003502:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	4413      	add	r3, r2
 800350c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003510:	691a      	ldr	r2, [r3, #16]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800351a:	69b9      	ldr	r1, [r7, #24]
 800351c:	0148      	lsls	r0, r1, #5
 800351e:	69f9      	ldr	r1, [r7, #28]
 8003520:	4401      	add	r1, r0
 8003522:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003526:	4313      	orrs	r3, r2
 8003528:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	78db      	ldrb	r3, [r3, #3]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d11f      	bne.n	8003572 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	4413      	add	r3, r2
 800353a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	0151      	lsls	r1, r2, #5
 8003544:	69fa      	ldr	r2, [r7, #28]
 8003546:	440a      	add	r2, r1
 8003548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800354c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003550:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	4413      	add	r3, r2
 800355a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	0151      	lsls	r1, r2, #5
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	440a      	add	r2, r1
 8003568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800356c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003570:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d14b      	bne.n	8003610 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d009      	beq.n	8003594 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358c:	461a      	mov	r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	78db      	ldrb	r3, [r3, #3]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d128      	bne.n	80035ee <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d110      	bne.n	80035ce <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	0151      	lsls	r1, r2, #5
 80035be:	69fa      	ldr	r2, [r7, #28]
 80035c0:	440a      	add	r2, r1
 80035c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	e00f      	b.n	80035ee <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	0151      	lsls	r1, r2, #5
 80035e0:	69fa      	ldr	r2, [r7, #28]
 80035e2:	440a      	add	r2, r1
 80035e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	0151      	lsls	r1, r2, #5
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	440a      	add	r2, r1
 8003604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003608:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	e12f      	b.n	8003870 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	4413      	add	r3, r2
 8003618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	0151      	lsls	r1, r2, #5
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	440a      	add	r2, r1
 8003626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800362a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800362e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	78db      	ldrb	r3, [r3, #3]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d015      	beq.n	8003664 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8117 	beq.w	8003870 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	2101      	movs	r1, #1
 8003654:	fa01 f303 	lsl.w	r3, r1, r3
 8003658:	69f9      	ldr	r1, [r7, #28]
 800365a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800365e:	4313      	orrs	r3, r2
 8003660:	634b      	str	r3, [r1, #52]	; 0x34
 8003662:	e105      	b.n	8003870 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d110      	bne.n	8003696 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	0151      	lsls	r1, r2, #5
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	440a      	add	r2, r1
 800368a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800368e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	e00f      	b.n	80036b6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	0151      	lsls	r1, r2, #5
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	440a      	add	r2, r1
 80036ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	68d9      	ldr	r1, [r3, #12]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	781a      	ldrb	r2, [r3, #0]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	b298      	uxth	r0, r3
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	4603      	mov	r3, r0
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fa2b 	bl	8003b26 <USB_WritePacket>
 80036d0:	e0ce      	b.n	8003870 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	0151      	lsls	r1, r2, #5
 80036e4:	69fa      	ldr	r2, [r7, #28]
 80036e6:	440a      	add	r2, r1
 80036e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036ec:	0cdb      	lsrs	r3, r3, #19
 80036ee:	04db      	lsls	r3, r3, #19
 80036f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	0151      	lsls	r1, r2, #5
 8003704:	69fa      	ldr	r2, [r7, #28]
 8003706:	440a      	add	r2, r1
 8003708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800370c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003710:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003714:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d126      	bne.n	800376c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	4413      	add	r3, r2
 8003726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003734:	69b9      	ldr	r1, [r7, #24]
 8003736:	0148      	lsls	r0, r1, #5
 8003738:	69f9      	ldr	r1, [r7, #28]
 800373a:	4401      	add	r1, r0
 800373c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003740:	4313      	orrs	r3, r2
 8003742:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	0151      	lsls	r1, r2, #5
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	440a      	add	r2, r1
 800375a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800375e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003762:	6113      	str	r3, [r2, #16]
 8003764:	e036      	b.n	80037d4 <USB_EPStartXfer+0x3dc>
 8003766:	bf00      	nop
 8003768:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	695a      	ldr	r2, [r3, #20]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4413      	add	r3, r2
 8003776:	1e5a      	subs	r2, r3, #1
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003780:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	015a      	lsls	r2, r3, #5
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	4413      	add	r3, r2
 800378a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	8afb      	ldrh	r3, [r7, #22]
 8003792:	04d9      	lsls	r1, r3, #19
 8003794:	4b39      	ldr	r3, [pc, #228]	; (800387c <USB_EPStartXfer+0x484>)
 8003796:	400b      	ands	r3, r1
 8003798:	69b9      	ldr	r1, [r7, #24]
 800379a:	0148      	lsls	r0, r1, #5
 800379c:	69f9      	ldr	r1, [r7, #28]
 800379e:	4401      	add	r1, r0
 80037a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80037a4:	4313      	orrs	r3, r2
 80037a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	8af9      	ldrh	r1, [r7, #22]
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c4:	69b9      	ldr	r1, [r7, #24]
 80037c6:	0148      	lsls	r0, r1, #5
 80037c8:	69f9      	ldr	r1, [r7, #28]
 80037ca:	4401      	add	r1, r0
 80037cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80037d0:	4313      	orrs	r3, r2
 80037d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80037d4:	79fb      	ldrb	r3, [r7, #7]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d10d      	bne.n	80037f6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	68d9      	ldr	r1, [r3, #12]
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f2:	460a      	mov	r2, r1
 80037f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	78db      	ldrb	r3, [r3, #3]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d128      	bne.n	8003850 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d110      	bne.n	8003830 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	4413      	add	r3, r2
 8003816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	0151      	lsls	r1, r2, #5
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	440a      	add	r2, r1
 8003824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003828:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	e00f      	b.n	8003850 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	0151      	lsls	r1, r2, #5
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	440a      	add	r2, r1
 8003846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800384a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800384e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	0151      	lsls	r1, r2, #5
 8003862:	69fa      	ldr	r2, [r7, #28]
 8003864:	440a      	add	r2, r1
 8003866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800386a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800386e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3720      	adds	r7, #32
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	1ff80000 	.word	0x1ff80000

08003880 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	4613      	mov	r3, r2
 800388c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	785b      	ldrb	r3, [r3, #1]
 800389c:	2b01      	cmp	r3, #1
 800389e:	f040 80cd 	bne.w	8003a3c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d132      	bne.n	8003910 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	0151      	lsls	r1, r2, #5
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	440a      	add	r2, r1
 80038c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	0151      	lsls	r1, r2, #5
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	440a      	add	r2, r1
 80038e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	0151      	lsls	r1, r2, #5
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	440a      	add	r2, r1
 8003904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003908:	0cdb      	lsrs	r3, r3, #19
 800390a:	04db      	lsls	r3, r3, #19
 800390c:	6113      	str	r3, [r2, #16]
 800390e:	e04e      	b.n	80039ae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	0151      	lsls	r1, r2, #5
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	440a      	add	r2, r1
 8003926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800392a:	0cdb      	lsrs	r3, r3, #19
 800392c:	04db      	lsls	r3, r3, #19
 800392e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	0151      	lsls	r1, r2, #5
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	440a      	add	r2, r1
 8003946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800394a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800394e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003952:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	429a      	cmp	r2, r3
 800395e:	d903      	bls.n	8003968 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	0151      	lsls	r1, r2, #5
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	440a      	add	r2, r1
 800397e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003982:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003986:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800399e:	6939      	ldr	r1, [r7, #16]
 80039a0:	0148      	lsls	r0, r1, #5
 80039a2:	6979      	ldr	r1, [r7, #20]
 80039a4:	4401      	add	r1, r0
 80039a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80039aa:	4313      	orrs	r3, r2
 80039ac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d11e      	bne.n	80039f2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d009      	beq.n	80039d0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c8:	461a      	mov	r2, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	0151      	lsls	r1, r2, #5
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	440a      	add	r2, r1
 80039e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	e092      	b.n	8003b18 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	0151      	lsls	r1, r2, #5
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	440a      	add	r2, r1
 8003a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a10:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d07e      	beq.n	8003b18 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a30:	6979      	ldr	r1, [r7, #20]
 8003a32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a36:	4313      	orrs	r3, r2
 8003a38:	634b      	str	r3, [r1, #52]	; 0x34
 8003a3a:	e06d      	b.n	8003b18 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	0151      	lsls	r1, r2, #5
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	440a      	add	r2, r1
 8003a52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a56:	0cdb      	lsrs	r3, r3, #19
 8003a58:	04db      	lsls	r3, r3, #19
 8003a5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	0151      	lsls	r1, r2, #5
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	440a      	add	r2, r1
 8003a72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a7e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	0151      	lsls	r1, r2, #5
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	440a      	add	r2, r1
 8003aa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003aaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003aae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac6:	6939      	ldr	r1, [r7, #16]
 8003ac8:	0148      	lsls	r0, r1, #5
 8003aca:	6979      	ldr	r1, [r7, #20]
 8003acc:	4401      	add	r1, r0
 8003ace:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d10d      	bne.n	8003af8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d009      	beq.n	8003af8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	68d9      	ldr	r1, [r3, #12]
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af4:	460a      	mov	r2, r1
 8003af6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	015a      	lsls	r2, r3, #5
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	0151      	lsls	r1, r2, #5
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	440a      	add	r2, r1
 8003b0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b089      	sub	sp, #36	; 0x24
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	4611      	mov	r1, r2
 8003b32:	461a      	mov	r2, r3
 8003b34:	460b      	mov	r3, r1
 8003b36:	71fb      	strb	r3, [r7, #7]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003b44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d11a      	bne.n	8003b82 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003b4c:	88bb      	ldrh	r3, [r7, #4]
 8003b4e:	3303      	adds	r3, #3
 8003b50:	089b      	lsrs	r3, r3, #2
 8003b52:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]
 8003b58:	e00f      	b.n	8003b7a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	031a      	lsls	r2, r3, #12
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b66:	461a      	mov	r2, r3
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	3304      	adds	r3, #4
 8003b72:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	3301      	adds	r3, #1
 8003b78:	61bb      	str	r3, [r7, #24]
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d3eb      	bcc.n	8003b5a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3724      	adds	r7, #36	; 0x24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b089      	sub	sp, #36	; 0x24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	3303      	adds	r3, #3
 8003baa:	089b      	lsrs	r3, r3, #2
 8003bac:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61bb      	str	r3, [r7, #24]
 8003bb2:	e00b      	b.n	8003bcc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	601a      	str	r2, [r3, #0]
    pDest++;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	61bb      	str	r3, [r7, #24]
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d3ef      	bcc.n	8003bb4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003bd4:	69fb      	ldr	r3, [r7, #28]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3724      	adds	r7, #36	; 0x24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b085      	sub	sp, #20
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	785b      	ldrb	r3, [r3, #1]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d12c      	bne.n	8003c58 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	db12      	blt.n	8003c36 <USB_EPSetStall+0x54>
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00f      	beq.n	8003c36 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	0151      	lsls	r1, r2, #5
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	440a      	add	r2, r1
 8003c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c34:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	0151      	lsls	r1, r2, #5
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	440a      	add	r2, r1
 8003c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	e02b      	b.n	8003cb0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	db12      	blt.n	8003c90 <USB_EPSetStall+0xae>
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00f      	beq.n	8003c90 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	0151      	lsls	r1, r2, #5
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	440a      	add	r2, r1
 8003c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c8e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	0151      	lsls	r1, r2, #5
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	440a      	add	r2, r1
 8003ca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003caa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b085      	sub	sp, #20
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	785b      	ldrb	r3, [r3, #1]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d128      	bne.n	8003d2c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	0151      	lsls	r1, r2, #5
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	440a      	add	r2, r1
 8003cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cf4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cf8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	78db      	ldrb	r3, [r3, #3]
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d003      	beq.n	8003d0a <USB_EPClearStall+0x4c>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	78db      	ldrb	r3, [r3, #3]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d138      	bne.n	8003d7c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	0151      	lsls	r1, r2, #5
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	440a      	add	r2, r1
 8003d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	e027      	b.n	8003d7c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	0151      	lsls	r1, r2, #5
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	440a      	add	r2, r1
 8003d42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d4a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	78db      	ldrb	r3, [r3, #3]
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	d003      	beq.n	8003d5c <USB_EPClearStall+0x9e>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	78db      	ldrb	r3, [r3, #3]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d10f      	bne.n	8003d7c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	0151      	lsls	r1, r2, #5
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	440a      	add	r2, r1
 8003d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b085      	sub	sp, #20
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	460b      	mov	r3, r1
 8003d94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003da8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003dac:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003dbe:	68f9      	ldr	r1, [r7, #12]
 8003dc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b085      	sub	sp, #20
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003df0:	f023 0303 	bic.w	r3, r3, #3
 8003df4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e04:	f023 0302 	bic.w	r3, r3, #2
 8003e08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003e32:	f023 0303 	bic.w	r3, r3, #3
 8003e36:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e46:	f043 0302 	orr.w	r3, r3, #2
 8003e4a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b085      	sub	sp, #20
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003e72:	68fb      	ldr	r3, [r7, #12]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	0c1b      	lsrs	r3, r3, #16
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	b29b      	uxth	r3, r3
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	4013      	ands	r3, r2
 8003f14:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003f16:	68bb      	ldr	r3, [r7, #8]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f46:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003f48:	78fb      	ldrb	r3, [r7, #3]
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
 8003f54:	01db      	lsls	r3, r3, #7
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003f5e:	78fb      	ldrb	r3, [r7, #3]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003f72:	68bb      	ldr	r3, [r7, #8]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	371c      	adds	r7, #28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fb6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003fba:	f023 0307 	bic.w	r3, r3, #7
 8003fbe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
	...

08003fe4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	460b      	mov	r3, r1
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	333c      	adds	r3, #60	; 0x3c
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4a26      	ldr	r2, [pc, #152]	; (800409c <USB_EP0_OutStart+0xb8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d90a      	bls.n	800401e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004014:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004018:	d101      	bne.n	800401e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	e037      	b.n	800408e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004024:	461a      	mov	r2, r3
 8004026:	2300      	movs	r3, #0
 8004028:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004038:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800403c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800404c:	f043 0318 	orr.w	r3, r3, #24
 8004050:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004060:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004064:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004066:	7afb      	ldrb	r3, [r7, #11]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d10f      	bne.n	800408c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004072:	461a      	mov	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004086:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800408a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	4f54300a 	.word	0x4f54300a

080040a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3301      	adds	r3, #1
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4a13      	ldr	r2, [pc, #76]	; (8004104 <USB_CoreReset+0x64>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d901      	bls.n	80040be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e01b      	b.n	80040f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	daf2      	bge.n	80040ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f043 0201 	orr.w	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3301      	adds	r3, #1
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4a09      	ldr	r2, [pc, #36]	; (8004104 <USB_CoreReset+0x64>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d901      	bls.n	80040e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e006      	b.n	80040f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d0f0      	beq.n	80040d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	00030d40 	.word	0x00030d40

08004108 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004114:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004118:	f002 f99c 	bl	8006454 <malloc>
 800411c:	4603      	mov	r3, r0
 800411e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d105      	bne.n	8004132 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800412e:	2302      	movs	r3, #2
 8004130:	e066      	b.n	8004200 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	7c1b      	ldrb	r3, [r3, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d119      	bne.n	8004176 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004146:	2202      	movs	r2, #2
 8004148:	2181      	movs	r1, #129	; 0x81
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f002 f809 	bl	8006162 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800415a:	2202      	movs	r2, #2
 800415c:	2101      	movs	r1, #1
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f001 ffff 	bl	8006162 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2210      	movs	r2, #16
 8004170:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004174:	e016      	b.n	80041a4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004176:	2340      	movs	r3, #64	; 0x40
 8004178:	2202      	movs	r2, #2
 800417a:	2181      	movs	r1, #129	; 0x81
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f001 fff0 	bl	8006162 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004188:	2340      	movs	r3, #64	; 0x40
 800418a:	2202      	movs	r2, #2
 800418c:	2101      	movs	r1, #1
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f001 ffe7 	bl	8006162 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2210      	movs	r2, #16
 80041a0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80041a4:	2308      	movs	r3, #8
 80041a6:	2203      	movs	r2, #3
 80041a8:	2182      	movs	r1, #130	; 0x82
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f001 ffd9 	bl	8006162 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	7c1b      	ldrb	r3, [r3, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d109      	bne.n	80041ee <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041e4:	2101      	movs	r1, #1
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f002 f8aa 	bl	8006340 <USBD_LL_PrepareReceive>
 80041ec:	e007      	b.n	80041fe <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041f4:	2340      	movs	r3, #64	; 0x40
 80041f6:	2101      	movs	r1, #1
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f002 f8a1 	bl	8006340 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	460b      	mov	r3, r1
 8004212:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004218:	2181      	movs	r1, #129	; 0x81
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f001 ffc7 	bl	80061ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004226:	2101      	movs	r1, #1
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f001 ffc0 	bl	80061ae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004236:	2182      	movs	r1, #130	; 0x82
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f001 ffb8 	bl	80061ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00e      	beq.n	8004276 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004268:	4618      	mov	r0, r3
 800426a:	f002 f8fb 	bl	8006464 <free>
    pdev->pClassData = NULL;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8004276:	7bfb      	ldrb	r3, [r7, #15]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004290:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004292:	2300      	movs	r3, #0
 8004294:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d03a      	beq.n	8004320 <USBD_CDC_Setup+0xa0>
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	f040 8097 	bne.w	80043de <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	88db      	ldrh	r3, [r3, #6]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d029      	beq.n	800430c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	b25b      	sxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	da11      	bge.n	80042e6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80042ce:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	88d2      	ldrh	r2, [r2, #6]
 80042d4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80042d6:	6939      	ldr	r1, [r7, #16]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	88db      	ldrh	r3, [r3, #6]
 80042dc:	461a      	mov	r2, r3
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f001 fa9d 	bl	800581e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80042e4:	e082      	b.n	80043ec <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	785a      	ldrb	r2, [r3, #1]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	88db      	ldrh	r3, [r3, #6]
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80042fc:	6939      	ldr	r1, [r7, #16]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	88db      	ldrh	r3, [r3, #6]
 8004302:	461a      	mov	r2, r3
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f001 fab6 	bl	8005876 <USBD_CtlPrepareRx>
    break;
 800430a:	e06f      	b.n	80043ec <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	7850      	ldrb	r0, [r2, #1]
 8004318:	2200      	movs	r2, #0
 800431a:	6839      	ldr	r1, [r7, #0]
 800431c:	4798      	blx	r3
    break;
 800431e:	e065      	b.n	80043ec <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	785b      	ldrb	r3, [r3, #1]
 8004324:	2b0b      	cmp	r3, #11
 8004326:	d84f      	bhi.n	80043c8 <USBD_CDC_Setup+0x148>
 8004328:	a201      	add	r2, pc, #4	; (adr r2, 8004330 <USBD_CDC_Setup+0xb0>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004361 	.word	0x08004361
 8004334:	080043d7 	.word	0x080043d7
 8004338:	080043c9 	.word	0x080043c9
 800433c:	080043c9 	.word	0x080043c9
 8004340:	080043c9 	.word	0x080043c9
 8004344:	080043c9 	.word	0x080043c9
 8004348:	080043c9 	.word	0x080043c9
 800434c:	080043c9 	.word	0x080043c9
 8004350:	080043c9 	.word	0x080043c9
 8004354:	080043c9 	.word	0x080043c9
 8004358:	08004389 	.word	0x08004389
 800435c:	080043b1 	.word	0x080043b1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004366:	2b03      	cmp	r3, #3
 8004368:	d107      	bne.n	800437a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800436a:	f107 030c 	add.w	r3, r7, #12
 800436e:	2202      	movs	r2, #2
 8004370:	4619      	mov	r1, r3
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f001 fa53 	bl	800581e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004378:	e030      	b.n	80043dc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800437a:	6839      	ldr	r1, [r7, #0]
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f001 f9dd 	bl	800573c <USBD_CtlError>
        ret = USBD_FAIL;
 8004382:	2303      	movs	r3, #3
 8004384:	75fb      	strb	r3, [r7, #23]
      break;
 8004386:	e029      	b.n	80043dc <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800438e:	2b03      	cmp	r3, #3
 8004390:	d107      	bne.n	80043a2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004392:	f107 030f 	add.w	r3, r7, #15
 8004396:	2201      	movs	r2, #1
 8004398:	4619      	mov	r1, r3
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f001 fa3f 	bl	800581e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80043a0:	e01c      	b.n	80043dc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80043a2:	6839      	ldr	r1, [r7, #0]
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f001 f9c9 	bl	800573c <USBD_CtlError>
        ret = USBD_FAIL;
 80043aa:	2303      	movs	r3, #3
 80043ac:	75fb      	strb	r3, [r7, #23]
      break;
 80043ae:	e015      	b.n	80043dc <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d00f      	beq.n	80043da <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80043ba:	6839      	ldr	r1, [r7, #0]
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f001 f9bd 	bl	800573c <USBD_CtlError>
        ret = USBD_FAIL;
 80043c2:	2303      	movs	r3, #3
 80043c4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80043c6:	e008      	b.n	80043da <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80043c8:	6839      	ldr	r1, [r7, #0]
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f001 f9b6 	bl	800573c <USBD_CtlError>
      ret = USBD_FAIL;
 80043d0:	2303      	movs	r3, #3
 80043d2:	75fb      	strb	r3, [r7, #23]
      break;
 80043d4:	e002      	b.n	80043dc <USBD_CDC_Setup+0x15c>
      break;
 80043d6:	bf00      	nop
 80043d8:	e008      	b.n	80043ec <USBD_CDC_Setup+0x16c>
      break;
 80043da:	bf00      	nop
    }
    break;
 80043dc:	e006      	b.n	80043ec <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80043de:	6839      	ldr	r1, [r7, #0]
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f001 f9ab 	bl	800573c <USBD_CtlError>
    ret = USBD_FAIL;
 80043e6:	2303      	movs	r3, #3
 80043e8:	75fb      	strb	r3, [r7, #23]
    break;
 80043ea:	bf00      	nop
  }

  return (uint8_t)ret;
 80043ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop

080043f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800440a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004416:	2303      	movs	r3, #3
 8004418:	e049      	b.n	80044ae <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004420:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004422:	78fa      	ldrb	r2, [r7, #3]
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	3318      	adds	r3, #24
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d029      	beq.n	800448c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004438:	78fa      	ldrb	r2, [r7, #3]
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	3318      	adds	r3, #24
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	78f9      	ldrb	r1, [r7, #3]
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	460b      	mov	r3, r1
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	1a5b      	subs	r3, r3, r1
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4403      	add	r3, r0
 8004458:	3344      	adds	r3, #68	; 0x44
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004460:	fb03 f301 	mul.w	r3, r3, r1
 8004464:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004466:	2b00      	cmp	r3, #0
 8004468:	d110      	bne.n	800448c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800446a:	78fa      	ldrb	r2, [r7, #3]
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	4613      	mov	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	440b      	add	r3, r1
 8004478:	3318      	adds	r3, #24
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800447e:	78f9      	ldrb	r1, [r7, #3]
 8004480:	2300      	movs	r3, #0
 8004482:	2200      	movs	r2, #0
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f001 ff3a 	bl	80062fe <USBD_LL_Transmit>
 800448a:	e00f      	b.n	80044ac <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2200      	movs	r2, #0
 8004490:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80044a8:	78fa      	ldrb	r2, [r7, #3]
 80044aa:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	460b      	mov	r3, r1
 80044c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e015      	b.n	8004504 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80044d8:	78fb      	ldrb	r3, [r7, #3]
 80044da:	4619      	mov	r1, r3
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f001 ff50 	bl	8006382 <USBD_LL_GetRxDataSize>
 80044e2:	4602      	mov	r2, r0
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80044fe:	4611      	mov	r1, r2
 8004500:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800451a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d015      	beq.n	8004552 <USBD_CDC_EP0_RxReady+0x46>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800452c:	2bff      	cmp	r3, #255	; 0xff
 800452e:	d010      	beq.n	8004552 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800453e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004546:	b292      	uxth	r2, r2
 8004548:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	22ff      	movs	r2, #255	; 0xff
 800454e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2243      	movs	r2, #67	; 0x43
 8004568:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800456a:	4b03      	ldr	r3, [pc, #12]	; (8004578 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	20000094 	.word	0x20000094

0800457c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2243      	movs	r2, #67	; 0x43
 8004588:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800458a:	4b03      	ldr	r3, [pc, #12]	; (8004598 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800458c:	4618      	mov	r0, r3
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	20000050 	.word	0x20000050

0800459c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2243      	movs	r2, #67	; 0x43
 80045a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80045aa:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	200000d8 	.word	0x200000d8

080045bc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	220a      	movs	r2, #10
 80045c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80045ca:	4b03      	ldr	r3, [pc, #12]	; (80045d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	2000000c 	.word	0x2000000c

080045dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e004      	b.n	80045fa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004606:	b480      	push	{r7}
 8004608:	b087      	sub	sp, #28
 800460a:	af00      	add	r7, sp, #0
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004618:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	371c      	adds	r7, #28
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004648:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800466e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004670:	2301      	movs	r3, #1
 8004672:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800467e:	2303      	movs	r3, #3
 8004680:	e01a      	b.n	80046b8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004688:	2b00      	cmp	r3, #0
 800468a:	d114      	bne.n	80046b6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2201      	movs	r2, #1
 8004690:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80046aa:	2181      	movs	r1, #129	; 0x81
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f001 fe26 	bl	80062fe <USBD_LL_Transmit>

    ret = USBD_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80046da:	2303      	movs	r3, #3
 80046dc:	e016      	b.n	800470c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	7c1b      	ldrb	r3, [r3, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d109      	bne.n	80046fa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046f0:	2101      	movs	r1, #1
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f001 fe24 	bl	8006340 <USBD_LL_PrepareReceive>
 80046f8:	e007      	b.n	800470a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004700:	2340      	movs	r3, #64	; 0x40
 8004702:	2101      	movs	r1, #1
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f001 fe1b 	bl	8006340 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	4613      	mov	r3, r2
 8004720:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004728:	2303      	movs	r3, #3
 800472a:	e025      	b.n	8004778 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	79fa      	ldrb	r2, [r7, #7]
 800476a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f001 fc91 	bl	8006094 <USBD_LL_Init>
 8004772:	4603      	mov	r3, r0
 8004774:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004776:	7dfb      	ldrb	r3, [r7, #23]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004794:	2303      	movs	r3, #3
 8004796:	e010      	b.n	80047ba <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a8:	f107 020e 	add.w	r2, r7, #14
 80047ac:	4610      	mov	r0, r2
 80047ae:	4798      	blx	r3
 80047b0:	4602      	mov	r2, r0
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f001 fcae 	bl	800612c <USBD_LL_Start>
 80047d0:	4603      	mov	r3, r0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80047fc:	2303      	movs	r3, #3
 80047fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	78fa      	ldrb	r2, [r7, #3]
 8004814:	4611      	mov	r1, r2
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	4798      	blx	r3
 800481a:	4603      	mov	r3, r0
 800481c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800481e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800483a:	2b00      	cmp	r3, #0
 800483c:	d007      	beq.n	800484e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	78fa      	ldrb	r2, [r7, #3]
 8004848:	4611      	mov	r1, r2
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	4798      	blx	r3
  }

  return USBD_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004868:	6839      	ldr	r1, [r7, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f000 ff2c 	bl	80056c8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800487e:	461a      	mov	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	2b01      	cmp	r3, #1
 8004892:	d00e      	beq.n	80048b2 <USBD_LL_SetupStage+0x5a>
 8004894:	2b01      	cmp	r3, #1
 8004896:	d302      	bcc.n	800489e <USBD_LL_SetupStage+0x46>
 8004898:	2b02      	cmp	r3, #2
 800489a:	d014      	beq.n	80048c6 <USBD_LL_SetupStage+0x6e>
 800489c:	e01d      	b.n	80048da <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80048a4:	4619      	mov	r1, r3
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fa18 	bl	8004cdc <USBD_StdDevReq>
 80048ac:	4603      	mov	r3, r0
 80048ae:	73fb      	strb	r3, [r7, #15]
      break;
 80048b0:	e020      	b.n	80048f4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80048b8:	4619      	mov	r1, r3
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fa7c 	bl	8004db8 <USBD_StdItfReq>
 80048c0:	4603      	mov	r3, r0
 80048c2:	73fb      	strb	r3, [r7, #15]
      break;
 80048c4:	e016      	b.n	80048f4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80048cc:	4619      	mov	r1, r3
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fab8 	bl	8004e44 <USBD_StdEPReq>
 80048d4:	4603      	mov	r3, r0
 80048d6:	73fb      	strb	r3, [r7, #15]
      break;
 80048d8:	e00c      	b.n	80048f4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80048e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	4619      	mov	r1, r3
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f001 fc7f 	bl	80061ec <USBD_LL_StallEP>
 80048ee:	4603      	mov	r3, r0
 80048f0:	73fb      	strb	r3, [r7, #15]
      break;
 80048f2:	bf00      	nop
  }

  return ret;
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b086      	sub	sp, #24
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	460b      	mov	r3, r1
 8004908:	607a      	str	r2, [r7, #4]
 800490a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800490c:	7afb      	ldrb	r3, [r7, #11]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d137      	bne.n	8004982 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004918:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004920:	2b03      	cmp	r3, #3
 8004922:	d14a      	bne.n	80049ba <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	429a      	cmp	r2, r3
 800492e:	d913      	bls.n	8004958 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	1ad2      	subs	r2, r2, r3
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	4293      	cmp	r3, r2
 8004948:	bf28      	it	cs
 800494a:	4613      	movcs	r3, r2
 800494c:	461a      	mov	r2, r3
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 ffad 	bl	80058b0 <USBD_CtlContinueRx>
 8004956:	e030      	b.n	80049ba <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00a      	beq.n	800497a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800496a:	2b03      	cmp	r3, #3
 800496c:	d105      	bne.n	800497a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 ffa9 	bl	80058d2 <USBD_CtlSendStatus>
 8004980:	e01b      	b.n	80049ba <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d013      	beq.n	80049b6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004994:	2b03      	cmp	r3, #3
 8004996:	d10e      	bne.n	80049b6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	7afa      	ldrb	r2, [r7, #11]
 80049a2:	4611      	mov	r1, r2
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	4798      	blx	r3
 80049a8:	4603      	mov	r3, r0
 80049aa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80049ac:	7dfb      	ldrb	r3, [r7, #23]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80049b2:	7dfb      	ldrb	r3, [r7, #23]
 80049b4:	e002      	b.n	80049bc <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e000      	b.n	80049bc <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	460b      	mov	r3, r1
 80049ce:	607a      	str	r2, [r7, #4]
 80049d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80049d2:	7afb      	ldrb	r3, [r7, #11]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d16a      	bne.n	8004aae <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	3314      	adds	r3, #20
 80049dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d155      	bne.n	8004a94 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d914      	bls.n	8004a1e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	1ad2      	subs	r2, r2, r3
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	461a      	mov	r2, r3
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 ff22 	bl	8005854 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004a10:	2300      	movs	r3, #0
 8004a12:	2200      	movs	r2, #0
 8004a14:	2100      	movs	r1, #0
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f001 fc92 	bl	8006340 <USBD_LL_PrepareReceive>
 8004a1c:	e03a      	b.n	8004a94 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d11c      	bne.n	8004a64 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d316      	bcc.n	8004a64 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d20f      	bcs.n	8004a64 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004a44:	2200      	movs	r2, #0
 8004a46:	2100      	movs	r1, #0
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 ff03 	bl	8005854 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004a56:	2300      	movs	r3, #0
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f001 fc6f 	bl	8006340 <USBD_LL_PrepareReceive>
 8004a62:	e017      	b.n	8004a94 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	d105      	bne.n	8004a86 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004a86:	2180      	movs	r1, #128	; 0x80
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f001 fbaf 	bl	80061ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 ff32 	bl	80058f8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d123      	bne.n	8004ae6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f7ff fe9b 	bl	80047da <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004aac:	e01b      	b.n	8004ae6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d013      	beq.n	8004ae2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d10e      	bne.n	8004ae2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	7afa      	ldrb	r2, [r7, #11]
 8004ace:	4611      	mov	r1, r2
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	4798      	blx	r3
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004ad8:	7dfb      	ldrb	r3, [r7, #23]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8004ade:	7dfb      	ldrb	r3, [r7, #23]
 8004ae0:	e002      	b.n	8004ae8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e000      	b.n	8004ae8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d009      	beq.n	8004b34 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6852      	ldr	r2, [r2, #4]
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	4611      	mov	r1, r2
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004b34:	2340      	movs	r3, #64	; 0x40
 8004b36:	2200      	movs	r2, #0
 8004b38:	2100      	movs	r1, #0
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f001 fb11 	bl	8006162 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2240      	movs	r2, #64	; 0x40
 8004b4c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004b50:	2340      	movs	r3, #64	; 0x40
 8004b52:	2200      	movs	r2, #0
 8004b54:	2180      	movs	r1, #128	; 0x80
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f001 fb03 	bl	8006162 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2240      	movs	r2, #64	; 0x40
 8004b66:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	78fa      	ldrb	r2, [r7, #3]
 8004b82:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2204      	movs	r2, #4
 8004baa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d105      	bne.n	8004bda <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d10b      	bne.n	8004c12 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d005      	beq.n	8004c12 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	460b      	mov	r3, r1
 8004c40:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b082      	sub	sp, #8
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d009      	beq.n	8004c94 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6852      	ldr	r2, [r2, #4]
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	4611      	mov	r1, r2
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	4798      	blx	r3
  }

  return USBD_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b087      	sub	sp, #28
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004cbc:	8a3b      	ldrh	r3, [r7, #16]
 8004cbe:	021b      	lsls	r3, r3, #8
 8004cc0:	b21a      	sxth	r2, r3
 8004cc2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	b21b      	sxth	r3, r3
 8004cca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004ccc:	89fb      	ldrh	r3, [r7, #14]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	371c      	adds	r7, #28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
	...

08004cdc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d004      	beq.n	8004d00 <USBD_StdDevReq+0x24>
 8004cf6:	2b40      	cmp	r3, #64	; 0x40
 8004cf8:	d002      	beq.n	8004d00 <USBD_StdDevReq+0x24>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <USBD_StdDevReq+0x38>
 8004cfe:	e050      	b.n	8004da2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	6839      	ldr	r1, [r7, #0]
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	4798      	blx	r3
 8004d0e:	4603      	mov	r3, r0
 8004d10:	73fb      	strb	r3, [r7, #15]
    break;
 8004d12:	e04b      	b.n	8004dac <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	785b      	ldrb	r3, [r3, #1]
 8004d18:	2b09      	cmp	r3, #9
 8004d1a:	d83c      	bhi.n	8004d96 <USBD_StdDevReq+0xba>
 8004d1c:	a201      	add	r2, pc, #4	; (adr r2, 8004d24 <USBD_StdDevReq+0x48>)
 8004d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d22:	bf00      	nop
 8004d24:	08004d79 	.word	0x08004d79
 8004d28:	08004d8d 	.word	0x08004d8d
 8004d2c:	08004d97 	.word	0x08004d97
 8004d30:	08004d83 	.word	0x08004d83
 8004d34:	08004d97 	.word	0x08004d97
 8004d38:	08004d57 	.word	0x08004d57
 8004d3c:	08004d4d 	.word	0x08004d4d
 8004d40:	08004d97 	.word	0x08004d97
 8004d44:	08004d6f 	.word	0x08004d6f
 8004d48:	08004d61 	.word	0x08004d61
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8004d4c:	6839      	ldr	r1, [r7, #0]
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f9ce 	bl	80050f0 <USBD_GetDescriptor>
      break;
 8004d54:	e024      	b.n	8004da0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8004d56:	6839      	ldr	r1, [r7, #0]
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 fb33 	bl	80053c4 <USBD_SetAddress>
      break;
 8004d5e:	e01f      	b.n	8004da0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8004d60:	6839      	ldr	r1, [r7, #0]
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fb70 	bl	8005448 <USBD_SetConfig>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d6c:	e018      	b.n	8004da0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8004d6e:	6839      	ldr	r1, [r7, #0]
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fc0d 	bl	8005590 <USBD_GetConfig>
      break;
 8004d76:	e013      	b.n	8004da0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8004d78:	6839      	ldr	r1, [r7, #0]
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 fc3c 	bl	80055f8 <USBD_GetStatus>
      break;
 8004d80:	e00e      	b.n	8004da0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8004d82:	6839      	ldr	r1, [r7, #0]
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 fc6a 	bl	800565e <USBD_SetFeature>
      break;
 8004d8a:	e009      	b.n	8004da0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8004d8c:	6839      	ldr	r1, [r7, #0]
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fc79 	bl	8005686 <USBD_ClrFeature>
      break;
 8004d94:	e004      	b.n	8004da0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8004d96:	6839      	ldr	r1, [r7, #0]
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fccf 	bl	800573c <USBD_CtlError>
      break;
 8004d9e:	bf00      	nop
    }
    break;
 8004da0:	e004      	b.n	8004dac <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8004da2:	6839      	ldr	r1, [r7, #0]
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fcc9 	bl	800573c <USBD_CtlError>
    break;
 8004daa:	bf00      	nop
  }

  return ret;
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop

08004db8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004dce:	2b20      	cmp	r3, #32
 8004dd0:	d003      	beq.n	8004dda <USBD_StdItfReq+0x22>
 8004dd2:	2b40      	cmp	r3, #64	; 0x40
 8004dd4:	d001      	beq.n	8004dda <USBD_StdItfReq+0x22>
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d12a      	bne.n	8004e30 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004de0:	3b01      	subs	r3, #1
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d81d      	bhi.n	8004e22 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	889b      	ldrh	r3, [r3, #4]
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d813      	bhi.n	8004e18 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	6839      	ldr	r1, [r7, #0]
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	4798      	blx	r3
 8004dfe:	4603      	mov	r3, r0
 8004e00:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	88db      	ldrh	r3, [r3, #6]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d110      	bne.n	8004e2c <USBD_StdItfReq+0x74>
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10d      	bne.n	8004e2c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 fd5e 	bl	80058d2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8004e16:	e009      	b.n	8004e2c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8004e18:	6839      	ldr	r1, [r7, #0]
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fc8e 	bl	800573c <USBD_CtlError>
      break;
 8004e20:	e004      	b.n	8004e2c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8004e22:	6839      	ldr	r1, [r7, #0]
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fc89 	bl	800573c <USBD_CtlError>
      break;
 8004e2a:	e000      	b.n	8004e2e <USBD_StdItfReq+0x76>
      break;
 8004e2c:	bf00      	nop
    }
    break;
 8004e2e:	e004      	b.n	8004e3a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8004e30:	6839      	ldr	r1, [r7, #0]
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fc82 	bl	800573c <USBD_CtlError>
    break;
 8004e38:	bf00      	nop
  }

  return ret;
 8004e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	889b      	ldrh	r3, [r3, #4]
 8004e56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e60:	2b20      	cmp	r3, #32
 8004e62:	d004      	beq.n	8004e6e <USBD_StdEPReq+0x2a>
 8004e64:	2b40      	cmp	r3, #64	; 0x40
 8004e66:	d002      	beq.n	8004e6e <USBD_StdEPReq+0x2a>
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <USBD_StdEPReq+0x3e>
 8004e6c:	e135      	b.n	80050da <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	6839      	ldr	r1, [r7, #0]
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	4798      	blx	r3
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	73fb      	strb	r3, [r7, #15]
    break;
 8004e80:	e130      	b.n	80050e4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	785b      	ldrb	r3, [r3, #1]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d03e      	beq.n	8004f08 <USBD_StdEPReq+0xc4>
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d002      	beq.n	8004e94 <USBD_StdEPReq+0x50>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d077      	beq.n	8004f82 <USBD_StdEPReq+0x13e>
 8004e92:	e11c      	b.n	80050ce <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d002      	beq.n	8004ea4 <USBD_StdEPReq+0x60>
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d015      	beq.n	8004ece <USBD_StdEPReq+0x8a>
 8004ea2:	e02b      	b.n	8004efc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004ea4:	7bbb      	ldrb	r3, [r7, #14]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00c      	beq.n	8004ec4 <USBD_StdEPReq+0x80>
 8004eaa:	7bbb      	ldrb	r3, [r7, #14]
 8004eac:	2b80      	cmp	r3, #128	; 0x80
 8004eae:	d009      	beq.n	8004ec4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8004eb0:	7bbb      	ldrb	r3, [r7, #14]
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f001 f999 	bl	80061ec <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004eba:	2180      	movs	r1, #128	; 0x80
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f001 f995 	bl	80061ec <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004ec2:	e020      	b.n	8004f06 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8004ec4:	6839      	ldr	r1, [r7, #0]
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fc38 	bl	800573c <USBD_CtlError>
        break;
 8004ecc:	e01b      	b.n	8004f06 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	885b      	ldrh	r3, [r3, #2]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10e      	bne.n	8004ef4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004ed6:	7bbb      	ldrb	r3, [r7, #14]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00b      	beq.n	8004ef4 <USBD_StdEPReq+0xb0>
 8004edc:	7bbb      	ldrb	r3, [r7, #14]
 8004ede:	2b80      	cmp	r3, #128	; 0x80
 8004ee0:	d008      	beq.n	8004ef4 <USBD_StdEPReq+0xb0>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	88db      	ldrh	r3, [r3, #6]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d104      	bne.n	8004ef4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8004eea:	7bbb      	ldrb	r3, [r7, #14]
 8004eec:	4619      	mov	r1, r3
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f001 f97c 	bl	80061ec <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fcec 	bl	80058d2 <USBD_CtlSendStatus>

        break;
 8004efa:	e004      	b.n	8004f06 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8004efc:	6839      	ldr	r1, [r7, #0]
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fc1c 	bl	800573c <USBD_CtlError>
        break;
 8004f04:	bf00      	nop
      }
      break;
 8004f06:	e0e7      	b.n	80050d8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d002      	beq.n	8004f18 <USBD_StdEPReq+0xd4>
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	d015      	beq.n	8004f42 <USBD_StdEPReq+0xfe>
 8004f16:	e02d      	b.n	8004f74 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f18:	7bbb      	ldrb	r3, [r7, #14]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00c      	beq.n	8004f38 <USBD_StdEPReq+0xf4>
 8004f1e:	7bbb      	ldrb	r3, [r7, #14]
 8004f20:	2b80      	cmp	r3, #128	; 0x80
 8004f22:	d009      	beq.n	8004f38 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8004f24:	7bbb      	ldrb	r3, [r7, #14]
 8004f26:	4619      	mov	r1, r3
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f001 f95f 	bl	80061ec <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004f2e:	2180      	movs	r1, #128	; 0x80
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f001 f95b 	bl	80061ec <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004f36:	e023      	b.n	8004f80 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8004f38:	6839      	ldr	r1, [r7, #0]
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fbfe 	bl	800573c <USBD_CtlError>
        break;
 8004f40:	e01e      	b.n	8004f80 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	885b      	ldrh	r3, [r3, #2]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d119      	bne.n	8004f7e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8004f4a:	7bbb      	ldrb	r3, [r7, #14]
 8004f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d004      	beq.n	8004f5e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004f54:	7bbb      	ldrb	r3, [r7, #14]
 8004f56:	4619      	mov	r1, r3
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f001 f966 	bl	800622a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fcb7 	bl	80058d2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	6839      	ldr	r1, [r7, #0]
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	4798      	blx	r3
        }
        break;
 8004f72:	e004      	b.n	8004f7e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8004f74:	6839      	ldr	r1, [r7, #0]
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fbe0 	bl	800573c <USBD_CtlError>
        break;
 8004f7c:	e000      	b.n	8004f80 <USBD_StdEPReq+0x13c>
        break;
 8004f7e:	bf00      	nop
      }
      break;
 8004f80:	e0aa      	b.n	80050d8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d002      	beq.n	8004f92 <USBD_StdEPReq+0x14e>
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d032      	beq.n	8004ff6 <USBD_StdEPReq+0x1b2>
 8004f90:	e097      	b.n	80050c2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f92:	7bbb      	ldrb	r3, [r7, #14]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d007      	beq.n	8004fa8 <USBD_StdEPReq+0x164>
 8004f98:	7bbb      	ldrb	r3, [r7, #14]
 8004f9a:	2b80      	cmp	r3, #128	; 0x80
 8004f9c:	d004      	beq.n	8004fa8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8004f9e:	6839      	ldr	r1, [r7, #0]
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 fbcb 	bl	800573c <USBD_CtlError>
          break;
 8004fa6:	e091      	b.n	80050cc <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004fa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	da0b      	bge.n	8004fc8 <USBD_StdEPReq+0x184>
 8004fb0:	7bbb      	ldrb	r3, [r7, #14]
 8004fb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	3310      	adds	r3, #16
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	e00b      	b.n	8004fe0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8004fc8:	7bbb      	ldrb	r3, [r7, #14]
 8004fca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	4413      	add	r3, r2
 8004fde:	3304      	adds	r3, #4
 8004fe0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2202      	movs	r2, #2
 8004fec:	4619      	mov	r1, r3
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fc15 	bl	800581e <USBD_CtlSendData>
        break;
 8004ff4:	e06a      	b.n	80050cc <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8004ff6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	da11      	bge.n	8005022 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004ffe:	7bbb      	ldrb	r3, [r7, #14]
 8005000:	f003 020f 	and.w	r2, r3, #15
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	4613      	mov	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	440b      	add	r3, r1
 8005010:	3324      	adds	r3, #36	; 0x24
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d117      	bne.n	8005048 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005018:	6839      	ldr	r1, [r7, #0]
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fb8e 	bl	800573c <USBD_CtlError>
            break;
 8005020:	e054      	b.n	80050cc <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005022:	7bbb      	ldrb	r3, [r7, #14]
 8005024:	f003 020f 	and.w	r2, r3, #15
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	4613      	mov	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	440b      	add	r3, r1
 8005034:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d104      	bne.n	8005048 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800503e:	6839      	ldr	r1, [r7, #0]
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fb7b 	bl	800573c <USBD_CtlError>
            break;
 8005046:	e041      	b.n	80050cc <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005048:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800504c:	2b00      	cmp	r3, #0
 800504e:	da0b      	bge.n	8005068 <USBD_StdEPReq+0x224>
 8005050:	7bbb      	ldrb	r3, [r7, #14]
 8005052:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	3310      	adds	r3, #16
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	4413      	add	r3, r2
 8005064:	3304      	adds	r3, #4
 8005066:	e00b      	b.n	8005080 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005068:	7bbb      	ldrb	r3, [r7, #14]
 800506a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	4413      	add	r3, r2
 800507e:	3304      	adds	r3, #4
 8005080:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005082:	7bbb      	ldrb	r3, [r7, #14]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <USBD_StdEPReq+0x24a>
 8005088:	7bbb      	ldrb	r3, [r7, #14]
 800508a:	2b80      	cmp	r3, #128	; 0x80
 800508c:	d103      	bne.n	8005096 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	e00e      	b.n	80050b4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005096:	7bbb      	ldrb	r3, [r7, #14]
 8005098:	4619      	mov	r1, r3
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f001 f8e4 	bl	8006268 <USBD_LL_IsStallEP>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2201      	movs	r2, #1
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	e002      	b.n	80050b4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2202      	movs	r2, #2
 80050b8:	4619      	mov	r1, r3
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fbaf 	bl	800581e <USBD_CtlSendData>
          break;
 80050c0:	e004      	b.n	80050cc <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80050c2:	6839      	ldr	r1, [r7, #0]
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fb39 	bl	800573c <USBD_CtlError>
        break;
 80050ca:	bf00      	nop
      }
      break;
 80050cc:	e004      	b.n	80050d8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80050ce:	6839      	ldr	r1, [r7, #0]
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fb33 	bl	800573c <USBD_CtlError>
      break;
 80050d6:	bf00      	nop
    }
    break;
 80050d8:	e004      	b.n	80050e4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80050da:	6839      	ldr	r1, [r7, #0]
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fb2d 	bl	800573c <USBD_CtlError>
    break;
 80050e2:	bf00      	nop
  }

  return ret;
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
	...

080050f0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	885b      	ldrh	r3, [r3, #2]
 800510a:	0a1b      	lsrs	r3, r3, #8
 800510c:	b29b      	uxth	r3, r3
 800510e:	3b01      	subs	r3, #1
 8005110:	2b06      	cmp	r3, #6
 8005112:	f200 8128 	bhi.w	8005366 <USBD_GetDescriptor+0x276>
 8005116:	a201      	add	r2, pc, #4	; (adr r2, 800511c <USBD_GetDescriptor+0x2c>)
 8005118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511c:	08005139 	.word	0x08005139
 8005120:	08005151 	.word	0x08005151
 8005124:	08005191 	.word	0x08005191
 8005128:	08005367 	.word	0x08005367
 800512c:	08005367 	.word	0x08005367
 8005130:	08005307 	.word	0x08005307
 8005134:	08005333 	.word	0x08005333
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	7c12      	ldrb	r2, [r2, #16]
 8005144:	f107 0108 	add.w	r1, r7, #8
 8005148:	4610      	mov	r0, r2
 800514a:	4798      	blx	r3
 800514c:	60f8      	str	r0, [r7, #12]
    break;
 800514e:	e112      	b.n	8005376 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	7c1b      	ldrb	r3, [r3, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10d      	bne.n	8005174 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800515e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005160:	f107 0208 	add.w	r2, r7, #8
 8005164:	4610      	mov	r0, r2
 8005166:	4798      	blx	r3
 8005168:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	3301      	adds	r3, #1
 800516e:	2202      	movs	r2, #2
 8005170:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005172:	e100      	b.n	8005376 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517c:	f107 0208 	add.w	r2, r7, #8
 8005180:	4610      	mov	r0, r2
 8005182:	4798      	blx	r3
 8005184:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	3301      	adds	r3, #1
 800518a:	2202      	movs	r2, #2
 800518c:	701a      	strb	r2, [r3, #0]
    break;
 800518e:	e0f2      	b.n	8005376 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	885b      	ldrh	r3, [r3, #2]
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b05      	cmp	r3, #5
 8005198:	f200 80ac 	bhi.w	80052f4 <USBD_GetDescriptor+0x204>
 800519c:	a201      	add	r2, pc, #4	; (adr r2, 80051a4 <USBD_GetDescriptor+0xb4>)
 800519e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a2:	bf00      	nop
 80051a4:	080051bd 	.word	0x080051bd
 80051a8:	080051f1 	.word	0x080051f1
 80051ac:	08005225 	.word	0x08005225
 80051b0:	08005259 	.word	0x08005259
 80051b4:	0800528d 	.word	0x0800528d
 80051b8:	080052c1 	.word	0x080052c1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00b      	beq.n	80051e0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	7c12      	ldrb	r2, [r2, #16]
 80051d4:	f107 0108 	add.w	r1, r7, #8
 80051d8:	4610      	mov	r0, r2
 80051da:	4798      	blx	r3
 80051dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80051de:	e091      	b.n	8005304 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80051e0:	6839      	ldr	r1, [r7, #0]
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 faaa 	bl	800573c <USBD_CtlError>
        err++;
 80051e8:	7afb      	ldrb	r3, [r7, #11]
 80051ea:	3301      	adds	r3, #1
 80051ec:	72fb      	strb	r3, [r7, #11]
      break;
 80051ee:	e089      	b.n	8005304 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00b      	beq.n	8005214 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	7c12      	ldrb	r2, [r2, #16]
 8005208:	f107 0108 	add.w	r1, r7, #8
 800520c:	4610      	mov	r0, r2
 800520e:	4798      	blx	r3
 8005210:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005212:	e077      	b.n	8005304 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005214:	6839      	ldr	r1, [r7, #0]
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fa90 	bl	800573c <USBD_CtlError>
        err++;
 800521c:	7afb      	ldrb	r3, [r7, #11]
 800521e:	3301      	adds	r3, #1
 8005220:	72fb      	strb	r3, [r7, #11]
      break;
 8005222:	e06f      	b.n	8005304 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00b      	beq.n	8005248 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	7c12      	ldrb	r2, [r2, #16]
 800523c:	f107 0108 	add.w	r1, r7, #8
 8005240:	4610      	mov	r0, r2
 8005242:	4798      	blx	r3
 8005244:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005246:	e05d      	b.n	8005304 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005248:	6839      	ldr	r1, [r7, #0]
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fa76 	bl	800573c <USBD_CtlError>
        err++;
 8005250:	7afb      	ldrb	r3, [r7, #11]
 8005252:	3301      	adds	r3, #1
 8005254:	72fb      	strb	r3, [r7, #11]
      break;
 8005256:	e055      	b.n	8005304 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00b      	beq.n	800527c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	7c12      	ldrb	r2, [r2, #16]
 8005270:	f107 0108 	add.w	r1, r7, #8
 8005274:	4610      	mov	r0, r2
 8005276:	4798      	blx	r3
 8005278:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800527a:	e043      	b.n	8005304 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800527c:	6839      	ldr	r1, [r7, #0]
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fa5c 	bl	800573c <USBD_CtlError>
        err++;
 8005284:	7afb      	ldrb	r3, [r7, #11]
 8005286:	3301      	adds	r3, #1
 8005288:	72fb      	strb	r3, [r7, #11]
      break;
 800528a:	e03b      	b.n	8005304 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00b      	beq.n	80052b0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	7c12      	ldrb	r2, [r2, #16]
 80052a4:	f107 0108 	add.w	r1, r7, #8
 80052a8:	4610      	mov	r0, r2
 80052aa:	4798      	blx	r3
 80052ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80052ae:	e029      	b.n	8005304 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fa42 	bl	800573c <USBD_CtlError>
        err++;
 80052b8:	7afb      	ldrb	r3, [r7, #11]
 80052ba:	3301      	adds	r3, #1
 80052bc:	72fb      	strb	r3, [r7, #11]
      break;
 80052be:	e021      	b.n	8005304 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00b      	beq.n	80052e4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	7c12      	ldrb	r2, [r2, #16]
 80052d8:	f107 0108 	add.w	r1, r7, #8
 80052dc:	4610      	mov	r0, r2
 80052de:	4798      	blx	r3
 80052e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80052e2:	e00f      	b.n	8005304 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80052e4:	6839      	ldr	r1, [r7, #0]
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 fa28 	bl	800573c <USBD_CtlError>
        err++;
 80052ec:	7afb      	ldrb	r3, [r7, #11]
 80052ee:	3301      	adds	r3, #1
 80052f0:	72fb      	strb	r3, [r7, #11]
      break;
 80052f2:	e007      	b.n	8005304 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80052f4:	6839      	ldr	r1, [r7, #0]
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fa20 	bl	800573c <USBD_CtlError>
      err++;
 80052fc:	7afb      	ldrb	r3, [r7, #11]
 80052fe:	3301      	adds	r3, #1
 8005300:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005302:	bf00      	nop
    }
    break;
 8005304:	e037      	b.n	8005376 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	7c1b      	ldrb	r3, [r3, #16]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d109      	bne.n	8005322 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005316:	f107 0208 	add.w	r2, r7, #8
 800531a:	4610      	mov	r0, r2
 800531c:	4798      	blx	r3
 800531e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005320:	e029      	b.n	8005376 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005322:	6839      	ldr	r1, [r7, #0]
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fa09 	bl	800573c <USBD_CtlError>
      err++;
 800532a:	7afb      	ldrb	r3, [r7, #11]
 800532c:	3301      	adds	r3, #1
 800532e:	72fb      	strb	r3, [r7, #11]
    break;
 8005330:	e021      	b.n	8005376 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	7c1b      	ldrb	r3, [r3, #16]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10d      	bne.n	8005356 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005342:	f107 0208 	add.w	r2, r7, #8
 8005346:	4610      	mov	r0, r2
 8005348:	4798      	blx	r3
 800534a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3301      	adds	r3, #1
 8005350:	2207      	movs	r2, #7
 8005352:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005354:	e00f      	b.n	8005376 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005356:	6839      	ldr	r1, [r7, #0]
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f9ef 	bl	800573c <USBD_CtlError>
      err++;
 800535e:	7afb      	ldrb	r3, [r7, #11]
 8005360:	3301      	adds	r3, #1
 8005362:	72fb      	strb	r3, [r7, #11]
    break;
 8005364:	e007      	b.n	8005376 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005366:	6839      	ldr	r1, [r7, #0]
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f9e7 	bl	800573c <USBD_CtlError>
    err++;
 800536e:	7afb      	ldrb	r3, [r7, #11]
 8005370:	3301      	adds	r3, #1
 8005372:	72fb      	strb	r3, [r7, #11]
    break;
 8005374:	bf00      	nop
  }

  if (err != 0U)
 8005376:	7afb      	ldrb	r3, [r7, #11]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d11e      	bne.n	80053ba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	88db      	ldrh	r3, [r3, #6]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d016      	beq.n	80053b2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005384:	893b      	ldrh	r3, [r7, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00e      	beq.n	80053a8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	88da      	ldrh	r2, [r3, #6]
 800538e:	893b      	ldrh	r3, [r7, #8]
 8005390:	4293      	cmp	r3, r2
 8005392:	bf28      	it	cs
 8005394:	4613      	movcs	r3, r2
 8005396:	b29b      	uxth	r3, r3
 8005398:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800539a:	893b      	ldrh	r3, [r7, #8]
 800539c:	461a      	mov	r2, r3
 800539e:	68f9      	ldr	r1, [r7, #12]
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fa3c 	bl	800581e <USBD_CtlSendData>
 80053a6:	e009      	b.n	80053bc <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80053a8:	6839      	ldr	r1, [r7, #0]
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f9c6 	bl	800573c <USBD_CtlError>
 80053b0:	e004      	b.n	80053bc <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fa8d 	bl	80058d2 <USBD_CtlSendStatus>
 80053b8:	e000      	b.n	80053bc <USBD_GetDescriptor+0x2cc>
    return;
 80053ba:	bf00      	nop
    }
  }
}
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop

080053c4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	889b      	ldrh	r3, [r3, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d130      	bne.n	8005438 <USBD_SetAddress+0x74>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	88db      	ldrh	r3, [r3, #6]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d12c      	bne.n	8005438 <USBD_SetAddress+0x74>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	885b      	ldrh	r3, [r3, #2]
 80053e2:	2b7f      	cmp	r3, #127	; 0x7f
 80053e4:	d828      	bhi.n	8005438 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	885b      	ldrh	r3, [r3, #2]
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d104      	bne.n	8005406 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80053fc:	6839      	ldr	r1, [r7, #0]
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f99c 	bl	800573c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005404:	e01c      	b.n	8005440 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	7bfa      	ldrb	r2, [r7, #15]
 800540a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800540e:	7bfb      	ldrb	r3, [r7, #15]
 8005410:	4619      	mov	r1, r3
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 ff54 	bl	80062c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fa5a 	bl	80058d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800541e:	7bfb      	ldrb	r3, [r7, #15]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d004      	beq.n	800542e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800542c:	e008      	b.n	8005440 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005436:	e003      	b.n	8005440 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005438:	6839      	ldr	r1, [r7, #0]
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f97e 	bl	800573c <USBD_CtlError>
  }
}
 8005440:	bf00      	nop
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	885b      	ldrh	r3, [r3, #2]
 800545a:	b2da      	uxtb	r2, r3
 800545c:	4b4b      	ldr	r3, [pc, #300]	; (800558c <USBD_SetConfig+0x144>)
 800545e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005460:	4b4a      	ldr	r3, [pc, #296]	; (800558c <USBD_SetConfig+0x144>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d905      	bls.n	8005474 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005468:	6839      	ldr	r1, [r7, #0]
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f966 	bl	800573c <USBD_CtlError>
    return USBD_FAIL;
 8005470:	2303      	movs	r3, #3
 8005472:	e087      	b.n	8005584 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800547a:	2b02      	cmp	r3, #2
 800547c:	d002      	beq.n	8005484 <USBD_SetConfig+0x3c>
 800547e:	2b03      	cmp	r3, #3
 8005480:	d025      	beq.n	80054ce <USBD_SetConfig+0x86>
 8005482:	e071      	b.n	8005568 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005484:	4b41      	ldr	r3, [pc, #260]	; (800558c <USBD_SetConfig+0x144>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d01c      	beq.n	80054c6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800548c:	4b3f      	ldr	r3, [pc, #252]	; (800558c <USBD_SetConfig+0x144>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005496:	4b3d      	ldr	r3, [pc, #244]	; (800558c <USBD_SetConfig+0x144>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	4619      	mov	r1, r3
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff f9a7 	bl	80047f0 <USBD_SetClassConfig>
 80054a2:	4603      	mov	r3, r0
 80054a4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80054a6:	7bfb      	ldrb	r3, [r7, #15]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d004      	beq.n	80054b6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80054ac:	6839      	ldr	r1, [r7, #0]
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f944 	bl	800573c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80054b4:	e065      	b.n	8005582 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa0b 	bl	80058d2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2203      	movs	r2, #3
 80054c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80054c4:	e05d      	b.n	8005582 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fa03 	bl	80058d2 <USBD_CtlSendStatus>
    break;
 80054cc:	e059      	b.n	8005582 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80054ce:	4b2f      	ldr	r3, [pc, #188]	; (800558c <USBD_SetConfig+0x144>)
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d112      	bne.n	80054fc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2202      	movs	r2, #2
 80054da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80054de:	4b2b      	ldr	r3, [pc, #172]	; (800558c <USBD_SetConfig+0x144>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80054e8:	4b28      	ldr	r3, [pc, #160]	; (800558c <USBD_SetConfig+0x144>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	4619      	mov	r1, r3
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff f99a 	bl	8004828 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f9ec 	bl	80058d2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80054fa:	e042      	b.n	8005582 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80054fc:	4b23      	ldr	r3, [pc, #140]	; (800558c <USBD_SetConfig+0x144>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	461a      	mov	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	429a      	cmp	r2, r3
 8005508:	d02a      	beq.n	8005560 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	b2db      	uxtb	r3, r3
 8005510:	4619      	mov	r1, r3
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7ff f988 	bl	8004828 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005518:	4b1c      	ldr	r3, [pc, #112]	; (800558c <USBD_SetConfig+0x144>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	461a      	mov	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005522:	4b1a      	ldr	r3, [pc, #104]	; (800558c <USBD_SetConfig+0x144>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	4619      	mov	r1, r3
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff f961 	bl	80047f0 <USBD_SetClassConfig>
 800552e:	4603      	mov	r3, r0
 8005530:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00f      	beq.n	8005558 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8005538:	6839      	ldr	r1, [r7, #0]
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f8fe 	bl	800573c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	b2db      	uxtb	r3, r3
 8005546:	4619      	mov	r1, r3
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7ff f96d 	bl	8004828 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2202      	movs	r2, #2
 8005552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005556:	e014      	b.n	8005582 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f9ba 	bl	80058d2 <USBD_CtlSendStatus>
    break;
 800555e:	e010      	b.n	8005582 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f9b6 	bl	80058d2 <USBD_CtlSendStatus>
    break;
 8005566:	e00c      	b.n	8005582 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005568:	6839      	ldr	r1, [r7, #0]
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f8e6 	bl	800573c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005570:	4b06      	ldr	r3, [pc, #24]	; (800558c <USBD_SetConfig+0x144>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	4619      	mov	r1, r3
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7ff f956 	bl	8004828 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800557c:	2303      	movs	r3, #3
 800557e:	73fb      	strb	r3, [r7, #15]
    break;
 8005580:	bf00      	nop
  }

  return ret;
 8005582:	7bfb      	ldrb	r3, [r7, #15]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	20000204 	.word	0x20000204

08005590 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	88db      	ldrh	r3, [r3, #6]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d004      	beq.n	80055ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80055a2:	6839      	ldr	r1, [r7, #0]
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f8c9 	bl	800573c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80055aa:	e021      	b.n	80055f0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	db17      	blt.n	80055e6 <USBD_GetConfig+0x56>
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	dd02      	ble.n	80055c0 <USBD_GetConfig+0x30>
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d00b      	beq.n	80055d6 <USBD_GetConfig+0x46>
 80055be:	e012      	b.n	80055e6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	3308      	adds	r3, #8
 80055ca:	2201      	movs	r2, #1
 80055cc:	4619      	mov	r1, r3
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f925 	bl	800581e <USBD_CtlSendData>
      break;
 80055d4:	e00c      	b.n	80055f0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	3304      	adds	r3, #4
 80055da:	2201      	movs	r2, #1
 80055dc:	4619      	mov	r1, r3
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f91d 	bl	800581e <USBD_CtlSendData>
      break;
 80055e4:	e004      	b.n	80055f0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80055e6:	6839      	ldr	r1, [r7, #0]
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f8a7 	bl	800573c <USBD_CtlError>
      break;
 80055ee:	bf00      	nop
}
 80055f0:	bf00      	nop
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005608:	3b01      	subs	r3, #1
 800560a:	2b02      	cmp	r3, #2
 800560c:	d81e      	bhi.n	800564c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	88db      	ldrh	r3, [r3, #6]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d004      	beq.n	8005620 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005616:	6839      	ldr	r1, [r7, #0]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f88f 	bl	800573c <USBD_CtlError>
      break;
 800561e:	e01a      	b.n	8005656 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f043 0202 	orr.w	r2, r3, #2
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	330c      	adds	r3, #12
 8005640:	2202      	movs	r2, #2
 8005642:	4619      	mov	r1, r3
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f8ea 	bl	800581e <USBD_CtlSendData>
    break;
 800564a:	e004      	b.n	8005656 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800564c:	6839      	ldr	r1, [r7, #0]
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f874 	bl	800573c <USBD_CtlError>
    break;
 8005654:	bf00      	nop
  }
}
 8005656:	bf00      	nop
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b082      	sub	sp, #8
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	885b      	ldrh	r3, [r3, #2]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d106      	bne.n	800567e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f92a 	bl	80058d2 <USBD_CtlSendStatus>
  }
}
 800567e:	bf00      	nop
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b082      	sub	sp, #8
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005696:	3b01      	subs	r3, #1
 8005698:	2b02      	cmp	r3, #2
 800569a:	d80b      	bhi.n	80056b4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	885b      	ldrh	r3, [r3, #2]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d10c      	bne.n	80056be <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f910 	bl	80058d2 <USBD_CtlSendStatus>
      }
      break;
 80056b2:	e004      	b.n	80056be <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80056b4:	6839      	ldr	r1, [r7, #0]
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f840 	bl	800573c <USBD_CtlError>
      break;
 80056bc:	e000      	b.n	80056c0 <USBD_ClrFeature+0x3a>
      break;
 80056be:	bf00      	nop
  }
}
 80056c0:	bf00      	nop
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	781a      	ldrb	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	3301      	adds	r3, #1
 80056e2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	781a      	ldrb	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3301      	adds	r3, #1
 80056f0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f7ff fad3 	bl	8004c9e <SWAPBYTE>
 80056f8:	4603      	mov	r3, r0
 80056fa:	461a      	mov	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	3301      	adds	r3, #1
 8005704:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3301      	adds	r3, #1
 800570a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f7ff fac6 	bl	8004c9e <SWAPBYTE>
 8005712:	4603      	mov	r3, r0
 8005714:	461a      	mov	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3301      	adds	r3, #1
 800571e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	3301      	adds	r3, #1
 8005724:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f7ff fab9 	bl	8004c9e <SWAPBYTE>
 800572c:	4603      	mov	r3, r0
 800572e:	461a      	mov	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	80da      	strh	r2, [r3, #6]
}
 8005734:	bf00      	nop
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005746:	2180      	movs	r1, #128	; 0x80
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fd4f 	bl	80061ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800574e:	2100      	movs	r1, #0
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 fd4b 	bl	80061ec <USBD_LL_StallEP>
}
 8005756:	bf00      	nop
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b086      	sub	sp, #24
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d036      	beq.n	80057e2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005778:	6938      	ldr	r0, [r7, #16]
 800577a:	f000 f836 	bl	80057ea <USBD_GetLen>
 800577e:	4603      	mov	r3, r0
 8005780:	3301      	adds	r3, #1
 8005782:	b29b      	uxth	r3, r3
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800578c:	7dfb      	ldrb	r3, [r7, #23]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	4413      	add	r3, r2
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	7812      	ldrb	r2, [r2, #0]
 8005796:	701a      	strb	r2, [r3, #0]
  idx++;
 8005798:	7dfb      	ldrb	r3, [r7, #23]
 800579a:	3301      	adds	r3, #1
 800579c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800579e:	7dfb      	ldrb	r3, [r7, #23]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	4413      	add	r3, r2
 80057a4:	2203      	movs	r2, #3
 80057a6:	701a      	strb	r2, [r3, #0]
  idx++;
 80057a8:	7dfb      	ldrb	r3, [r7, #23]
 80057aa:	3301      	adds	r3, #1
 80057ac:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80057ae:	e013      	b.n	80057d8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80057b0:	7dfb      	ldrb	r3, [r7, #23]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	4413      	add	r3, r2
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	7812      	ldrb	r2, [r2, #0]
 80057ba:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	3301      	adds	r3, #1
 80057c0:	613b      	str	r3, [r7, #16]
    idx++;
 80057c2:	7dfb      	ldrb	r3, [r7, #23]
 80057c4:	3301      	adds	r3, #1
 80057c6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80057c8:	7dfb      	ldrb	r3, [r7, #23]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	4413      	add	r3, r2
 80057ce:	2200      	movs	r2, #0
 80057d0:	701a      	strb	r2, [r3, #0]
    idx++;
 80057d2:	7dfb      	ldrb	r3, [r7, #23]
 80057d4:	3301      	adds	r3, #1
 80057d6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e7      	bne.n	80057b0 <USBD_GetString+0x52>
 80057e0:	e000      	b.n	80057e4 <USBD_GetString+0x86>
    return;
 80057e2:	bf00      	nop
  }
}
 80057e4:	3718      	adds	r7, #24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b085      	sub	sp, #20
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80057fa:	e005      	b.n	8005808 <USBD_GetLen+0x1e>
  {
    len++;
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	3301      	adds	r3, #1
 8005800:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	3301      	adds	r3, #1
 8005806:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1f5      	bne.n	80057fc <USBD_GetLen+0x12>
  }

  return len;
 8005810:	7bfb      	ldrb	r3, [r7, #15]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b084      	sub	sp, #16
 8005822:	af00      	add	r7, sp, #0
 8005824:	60f8      	str	r0, [r7, #12]
 8005826:	60b9      	str	r1, [r7, #8]
 8005828:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2202      	movs	r2, #2
 800582e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	2100      	movs	r1, #0
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 fd5a 	bl	80062fe <USBD_LL_Transmit>

  return USBD_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	2100      	movs	r1, #0
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 fd49 	bl	80062fe <USBD_LL_Transmit>

  return USBD_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b084      	sub	sp, #16
 800587a:	af00      	add	r7, sp, #0
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2203      	movs	r2, #3
 8005886:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	2100      	movs	r1, #0
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 fd4d 	bl	8006340 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	2100      	movs	r1, #0
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 fd3c 	bl	8006340 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b082      	sub	sp, #8
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2204      	movs	r2, #4
 80058de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80058e2:	2300      	movs	r3, #0
 80058e4:	2200      	movs	r2, #0
 80058e6:	2100      	movs	r1, #0
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fd08 	bl	80062fe <USBD_LL_Transmit>

  return USBD_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2205      	movs	r2, #5
 8005904:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005908:	2300      	movs	r3, #0
 800590a:	2200      	movs	r2, #0
 800590c:	2100      	movs	r1, #0
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 fd16 	bl	8006340 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
	...

08005920 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005924:	2200      	movs	r2, #0
 8005926:	4912      	ldr	r1, [pc, #72]	; (8005970 <MX_USB_DEVICE_Init+0x50>)
 8005928:	4812      	ldr	r0, [pc, #72]	; (8005974 <MX_USB_DEVICE_Init+0x54>)
 800592a:	f7fe fef3 	bl	8004714 <USBD_Init>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005934:	f7fa feaa 	bl	800068c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005938:	490f      	ldr	r1, [pc, #60]	; (8005978 <MX_USB_DEVICE_Init+0x58>)
 800593a:	480e      	ldr	r0, [pc, #56]	; (8005974 <MX_USB_DEVICE_Init+0x54>)
 800593c:	f7fe ff20 	bl	8004780 <USBD_RegisterClass>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005946:	f7fa fea1 	bl	800068c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800594a:	490c      	ldr	r1, [pc, #48]	; (800597c <MX_USB_DEVICE_Init+0x5c>)
 800594c:	4809      	ldr	r0, [pc, #36]	; (8005974 <MX_USB_DEVICE_Init+0x54>)
 800594e:	f7fe fe45 	bl	80045dc <USBD_CDC_RegisterInterface>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005958:	f7fa fe98 	bl	800068c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800595c:	4805      	ldr	r0, [pc, #20]	; (8005974 <MX_USB_DEVICE_Init+0x54>)
 800595e:	f7fe ff30 	bl	80047c2 <USBD_Start>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005968:	f7fa fe90 	bl	800068c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800596c:	bf00      	nop
 800596e:	bd80      	pop	{r7, pc}
 8005970:	20000130 	.word	0x20000130
 8005974:	20000214 	.word	0x20000214
 8005978:	20000018 	.word	0x20000018
 800597c:	2000011c 	.word	0x2000011c

08005980 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005984:	2200      	movs	r2, #0
 8005986:	4905      	ldr	r1, [pc, #20]	; (800599c <CDC_Init_FS+0x1c>)
 8005988:	4805      	ldr	r0, [pc, #20]	; (80059a0 <CDC_Init_FS+0x20>)
 800598a:	f7fe fe3c 	bl	8004606 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800598e:	4905      	ldr	r1, [pc, #20]	; (80059a4 <CDC_Init_FS+0x24>)
 8005990:	4803      	ldr	r0, [pc, #12]	; (80059a0 <CDC_Init_FS+0x20>)
 8005992:	f7fe fe51 	bl	8004638 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005996:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005998:	4618      	mov	r0, r3
 800599a:	bd80      	pop	{r7, pc}
 800599c:	20000ce4 	.word	0x20000ce4
 80059a0:	20000214 	.word	0x20000214
 80059a4:	200004e4 	.word	0x200004e4

080059a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80059ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	4603      	mov	r3, r0
 80059c0:	6039      	str	r1, [r7, #0]
 80059c2:	71fb      	strb	r3, [r7, #7]
 80059c4:	4613      	mov	r3, r2
 80059c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80059c8:	79fb      	ldrb	r3, [r7, #7]
 80059ca:	2b23      	cmp	r3, #35	; 0x23
 80059cc:	d84a      	bhi.n	8005a64 <CDC_Control_FS+0xac>
 80059ce:	a201      	add	r2, pc, #4	; (adr r2, 80059d4 <CDC_Control_FS+0x1c>)
 80059d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d4:	08005a65 	.word	0x08005a65
 80059d8:	08005a65 	.word	0x08005a65
 80059dc:	08005a65 	.word	0x08005a65
 80059e0:	08005a65 	.word	0x08005a65
 80059e4:	08005a65 	.word	0x08005a65
 80059e8:	08005a65 	.word	0x08005a65
 80059ec:	08005a65 	.word	0x08005a65
 80059f0:	08005a65 	.word	0x08005a65
 80059f4:	08005a65 	.word	0x08005a65
 80059f8:	08005a65 	.word	0x08005a65
 80059fc:	08005a65 	.word	0x08005a65
 8005a00:	08005a65 	.word	0x08005a65
 8005a04:	08005a65 	.word	0x08005a65
 8005a08:	08005a65 	.word	0x08005a65
 8005a0c:	08005a65 	.word	0x08005a65
 8005a10:	08005a65 	.word	0x08005a65
 8005a14:	08005a65 	.word	0x08005a65
 8005a18:	08005a65 	.word	0x08005a65
 8005a1c:	08005a65 	.word	0x08005a65
 8005a20:	08005a65 	.word	0x08005a65
 8005a24:	08005a65 	.word	0x08005a65
 8005a28:	08005a65 	.word	0x08005a65
 8005a2c:	08005a65 	.word	0x08005a65
 8005a30:	08005a65 	.word	0x08005a65
 8005a34:	08005a65 	.word	0x08005a65
 8005a38:	08005a65 	.word	0x08005a65
 8005a3c:	08005a65 	.word	0x08005a65
 8005a40:	08005a65 	.word	0x08005a65
 8005a44:	08005a65 	.word	0x08005a65
 8005a48:	08005a65 	.word	0x08005a65
 8005a4c:	08005a65 	.word	0x08005a65
 8005a50:	08005a65 	.word	0x08005a65
 8005a54:	08005a65 	.word	0x08005a65
 8005a58:	08005a65 	.word	0x08005a65
 8005a5c:	08005a65 	.word	0x08005a65
 8005a60:	08005a65 	.word	0x08005a65
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005a64:	bf00      	nop
  }

  return (USBD_OK);
 8005a66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005a74:	b5b0      	push	{r4, r5, r7, lr}
 8005a76:	b094      	sub	sp, #80	; 0x50
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005a7e:	6879      	ldr	r1, [r7, #4]
 8005a80:	4841      	ldr	r0, [pc, #260]	; (8005b88 <CDC_Receive_FS+0x114>)
 8005a82:	f7fe fdd9 	bl	8004638 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005a86:	4840      	ldr	r0, [pc, #256]	; (8005b88 <CDC_Receive_FS+0x114>)
 8005a88:	f7fe fe1a 	bl	80046c0 <USBD_CDC_ReceivePacket>
  if(Buf[0] == '>')
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	2b3e      	cmp	r3, #62	; 0x3e
 8005a92:	d172      	bne.n	8005b7a <CDC_Receive_FS+0x106>
  	  switch (Buf[1]) {
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3301      	adds	r3, #1
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d01d      	beq.n	8005ada <CDC_Receive_FS+0x66>
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d038      	beq.n	8005b14 <CDC_Receive_FS+0xa0>
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d151      	bne.n	8005b4a <CDC_Receive_FS+0xd6>
  		case 1:
  			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	4838      	ldr	r0, [pc, #224]	; (8005b8c <CDC_Receive_FS+0x118>)
 8005aaa:	f7fb fa2e 	bl	8000f0a <HAL_GPIO_TogglePin>
  			char data[]= "Ilk Ledi Yaktiniz";
 8005aae:	4b38      	ldr	r3, [pc, #224]	; (8005b90 <CDC_Receive_FS+0x11c>)
 8005ab0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8005ab4:	461d      	mov	r5, r3
 8005ab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005aba:	682b      	ldr	r3, [r5, #0]
 8005abc:	8023      	strh	r3, [r4, #0]
  			  					CDC_Transmit_FS (data, strlen(data));
 8005abe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fa fb92 	bl	80001ec <strlen>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005ad0:	4611      	mov	r1, r2
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 f864 	bl	8005ba0 <CDC_Transmit_FS>
            break;
 8005ad8:	e050      	b.n	8005b7c <CDC_Receive_FS+0x108>
  		case 2:
  			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8005ada:	2180      	movs	r1, #128	; 0x80
 8005adc:	482b      	ldr	r0, [pc, #172]	; (8005b8c <CDC_Receive_FS+0x118>)
 8005ade:	f7fb fa14 	bl	8000f0a <HAL_GPIO_TogglePin>
  			char data1[]= "Ikinci Ledi Yaktiniz";
 8005ae2:	4b2c      	ldr	r3, [pc, #176]	; (8005b94 <CDC_Receive_FS+0x120>)
 8005ae4:	f107 0420 	add.w	r4, r7, #32
 8005ae8:	461d      	mov	r5, r3
 8005aea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005aec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005aee:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005af2:	6020      	str	r0, [r4, #0]
 8005af4:	3404      	adds	r4, #4
 8005af6:	7021      	strb	r1, [r4, #0]
  			  					CDC_Transmit_FS (data1, strlen(data1));
 8005af8:	f107 0320 	add.w	r3, r7, #32
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7fa fb75 	bl	80001ec <strlen>
 8005b02:	4603      	mov	r3, r0
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	f107 0320 	add.w	r3, r7, #32
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 f847 	bl	8005ba0 <CDC_Transmit_FS>
  			break;
 8005b12:	e033      	b.n	8005b7c <CDC_Receive_FS+0x108>
  		case 3:
  			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8005b14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b18:	481c      	ldr	r0, [pc, #112]	; (8005b8c <CDC_Receive_FS+0x118>)
 8005b1a:	f7fb f9f6 	bl	8000f0a <HAL_GPIO_TogglePin>
  			char data2[]= "Son Ledi Yaktiniz";
 8005b1e:	4b1e      	ldr	r3, [pc, #120]	; (8005b98 <CDC_Receive_FS+0x124>)
 8005b20:	f107 040c 	add.w	r4, r7, #12
 8005b24:	461d      	mov	r5, r3
 8005b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b2a:	682b      	ldr	r3, [r5, #0]
 8005b2c:	8023      	strh	r3, [r4, #0]
  			  			  					CDC_Transmit_FS (data2, strlen(data2));
 8005b2e:	f107 030c 	add.w	r3, r7, #12
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fa fb5a 	bl	80001ec <strlen>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	f107 030c 	add.w	r3, r7, #12
 8005b40:	4611      	mov	r1, r2
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 f82c 	bl	8005ba0 <CDC_Transmit_FS>
  			break;
 8005b48:	e018      	b.n	8005b7c <CDC_Receive_FS+0x108>

  		default:
  			for(int32_t i=0; i<1000000; i++)
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b4e:	e00e      	b.n	8005b6e <CDC_Receive_FS+0xfa>
  			{
  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 |
 8005b50:	2201      	movs	r2, #1
 8005b52:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8005b56:	480d      	ldr	r0, [pc, #52]	; (8005b8c <CDC_Receive_FS+0x118>)
 8005b58:	f7fb f9be 	bl	8000ed8 <HAL_GPIO_WritePin>
  										 GPIO_PIN_13 |
  									     GPIO_PIN_14 , GPIO_PIN_SET);


  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 |
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8005b62:	480a      	ldr	r0, [pc, #40]	; (8005b8c <CDC_Receive_FS+0x118>)
 8005b64:	f7fb f9b8 	bl	8000ed8 <HAL_GPIO_WritePin>
  			for(int32_t i=0; i<1000000; i++)
 8005b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b70:	4a0a      	ldr	r2, [pc, #40]	; (8005b9c <CDC_Receive_FS+0x128>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	ddec      	ble.n	8005b50 <CDC_Receive_FS+0xdc>
  				     					 GPIO_PIN_13 |
  					    				 GPIO_PIN_14 , GPIO_PIN_RESET);
  			}
  			break;
 8005b76:	bf00      	nop
 8005b78:	e000      	b.n	8005b7c <CDC_Receive_FS+0x108>
  	}

  return (USBD_OK);
 8005b7a:	bf00      	nop
 8005b7c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3750      	adds	r7, #80	; 0x50
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bdb0      	pop	{r4, r5, r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20000214 	.word	0x20000214
 8005b8c:	40020400 	.word	0x40020400
 8005b90:	08006610 	.word	0x08006610
 8005b94:	08006624 	.word	0x08006624
 8005b98:	0800663c 	.word	0x0800663c
 8005b9c:	000f423f 	.word	0x000f423f

08005ba0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005bac:	2300      	movs	r3, #0
 8005bae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005bb0:	4b0d      	ldr	r3, [pc, #52]	; (8005be8 <CDC_Transmit_FS+0x48>)
 8005bb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bb6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e00b      	b.n	8005bde <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005bc6:	887b      	ldrh	r3, [r7, #2]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	6879      	ldr	r1, [r7, #4]
 8005bcc:	4806      	ldr	r0, [pc, #24]	; (8005be8 <CDC_Transmit_FS+0x48>)
 8005bce:	f7fe fd1a 	bl	8004606 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005bd2:	4805      	ldr	r0, [pc, #20]	; (8005be8 <CDC_Transmit_FS+0x48>)
 8005bd4:	f7fe fd44 	bl	8004660 <USBD_CDC_TransmitPacket>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20000214 	.word	0x20000214

08005bec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	6039      	str	r1, [r7, #0]
 8005bf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2212      	movs	r2, #18
 8005bfc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005bfe:	4b03      	ldr	r3, [pc, #12]	; (8005c0c <USBD_FS_DeviceDescriptor+0x20>)
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	2000014c 	.word	0x2000014c

08005c10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	4603      	mov	r3, r0
 8005c18:	6039      	str	r1, [r7, #0]
 8005c1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2204      	movs	r2, #4
 8005c20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005c22:	4b03      	ldr	r3, [pc, #12]	; (8005c30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	20000160 	.word	0x20000160

08005c34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	6039      	str	r1, [r7, #0]
 8005c3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005c40:	79fb      	ldrb	r3, [r7, #7]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d105      	bne.n	8005c52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	4907      	ldr	r1, [pc, #28]	; (8005c68 <USBD_FS_ProductStrDescriptor+0x34>)
 8005c4a:	4808      	ldr	r0, [pc, #32]	; (8005c6c <USBD_FS_ProductStrDescriptor+0x38>)
 8005c4c:	f7ff fd87 	bl	800575e <USBD_GetString>
 8005c50:	e004      	b.n	8005c5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	4904      	ldr	r1, [pc, #16]	; (8005c68 <USBD_FS_ProductStrDescriptor+0x34>)
 8005c56:	4805      	ldr	r0, [pc, #20]	; (8005c6c <USBD_FS_ProductStrDescriptor+0x38>)
 8005c58:	f7ff fd81 	bl	800575e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005c5c:	4b02      	ldr	r3, [pc, #8]	; (8005c68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	200014e4 	.word	0x200014e4
 8005c6c:	08006650 	.word	0x08006650

08005c70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	4603      	mov	r3, r0
 8005c78:	6039      	str	r1, [r7, #0]
 8005c7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	4904      	ldr	r1, [pc, #16]	; (8005c90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005c80:	4804      	ldr	r0, [pc, #16]	; (8005c94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005c82:	f7ff fd6c 	bl	800575e <USBD_GetString>
  return USBD_StrDesc;
 8005c86:	4b02      	ldr	r3, [pc, #8]	; (8005c90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	200014e4 	.word	0x200014e4
 8005c94:	08006668 	.word	0x08006668

08005c98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	6039      	str	r1, [r7, #0]
 8005ca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	221a      	movs	r2, #26
 8005ca8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005caa:	f000 f843 	bl	8005d34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005cae:	4b02      	ldr	r3, [pc, #8]	; (8005cb8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	20000164 	.word	0x20000164

08005cbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	6039      	str	r1, [r7, #0]
 8005cc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005cc8:	79fb      	ldrb	r3, [r7, #7]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d105      	bne.n	8005cda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	4907      	ldr	r1, [pc, #28]	; (8005cf0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005cd2:	4808      	ldr	r0, [pc, #32]	; (8005cf4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005cd4:	f7ff fd43 	bl	800575e <USBD_GetString>
 8005cd8:	e004      	b.n	8005ce4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	4904      	ldr	r1, [pc, #16]	; (8005cf0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005cde:	4805      	ldr	r0, [pc, #20]	; (8005cf4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005ce0:	f7ff fd3d 	bl	800575e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005ce4:	4b02      	ldr	r3, [pc, #8]	; (8005cf0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	200014e4 	.word	0x200014e4
 8005cf4:	0800667c 	.word	0x0800667c

08005cf8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4603      	mov	r3, r0
 8005d00:	6039      	str	r1, [r7, #0]
 8005d02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005d04:	79fb      	ldrb	r3, [r7, #7]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d105      	bne.n	8005d16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	4907      	ldr	r1, [pc, #28]	; (8005d2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005d0e:	4808      	ldr	r0, [pc, #32]	; (8005d30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005d10:	f7ff fd25 	bl	800575e <USBD_GetString>
 8005d14:	e004      	b.n	8005d20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	4904      	ldr	r1, [pc, #16]	; (8005d2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005d1a:	4805      	ldr	r0, [pc, #20]	; (8005d30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005d1c:	f7ff fd1f 	bl	800575e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005d20:	4b02      	ldr	r3, [pc, #8]	; (8005d2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	200014e4 	.word	0x200014e4
 8005d30:	08006688 	.word	0x08006688

08005d34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005d3a:	4b0f      	ldr	r3, [pc, #60]	; (8005d78 <Get_SerialNum+0x44>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005d40:	4b0e      	ldr	r3, [pc, #56]	; (8005d7c <Get_SerialNum+0x48>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005d46:	4b0e      	ldr	r3, [pc, #56]	; (8005d80 <Get_SerialNum+0x4c>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4413      	add	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d009      	beq.n	8005d6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005d5a:	2208      	movs	r2, #8
 8005d5c:	4909      	ldr	r1, [pc, #36]	; (8005d84 <Get_SerialNum+0x50>)
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 f814 	bl	8005d8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005d64:	2204      	movs	r2, #4
 8005d66:	4908      	ldr	r1, [pc, #32]	; (8005d88 <Get_SerialNum+0x54>)
 8005d68:	68b8      	ldr	r0, [r7, #8]
 8005d6a:	f000 f80f 	bl	8005d8c <IntToUnicode>
  }
}
 8005d6e:	bf00      	nop
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	1fff7a10 	.word	0x1fff7a10
 8005d7c:	1fff7a14 	.word	0x1fff7a14
 8005d80:	1fff7a18 	.word	0x1fff7a18
 8005d84:	20000166 	.word	0x20000166
 8005d88:	20000176 	.word	0x20000176

08005d8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	4613      	mov	r3, r2
 8005d98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005d9e:	2300      	movs	r3, #0
 8005da0:	75fb      	strb	r3, [r7, #23]
 8005da2:	e027      	b.n	8005df4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	0f1b      	lsrs	r3, r3, #28
 8005da8:	2b09      	cmp	r3, #9
 8005daa:	d80b      	bhi.n	8005dc4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	0f1b      	lsrs	r3, r3, #28
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	7dfb      	ldrb	r3, [r7, #23]
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	4619      	mov	r1, r3
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	440b      	add	r3, r1
 8005dbc:	3230      	adds	r2, #48	; 0x30
 8005dbe:	b2d2      	uxtb	r2, r2
 8005dc0:	701a      	strb	r2, [r3, #0]
 8005dc2:	e00a      	b.n	8005dda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	0f1b      	lsrs	r3, r3, #28
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	7dfb      	ldrb	r3, [r7, #23]
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	4619      	mov	r1, r3
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	440b      	add	r3, r1
 8005dd4:	3237      	adds	r2, #55	; 0x37
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005de0:	7dfb      	ldrb	r3, [r7, #23]
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	3301      	adds	r3, #1
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	4413      	add	r3, r2
 8005dea:	2200      	movs	r2, #0
 8005dec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005dee:	7dfb      	ldrb	r3, [r7, #23]
 8005df0:	3301      	adds	r3, #1
 8005df2:	75fb      	strb	r3, [r7, #23]
 8005df4:	7dfa      	ldrb	r2, [r7, #23]
 8005df6:	79fb      	ldrb	r3, [r7, #7]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d3d3      	bcc.n	8005da4 <IntToUnicode+0x18>
  }
}
 8005dfc:	bf00      	nop
 8005dfe:	371c      	adds	r7, #28
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08a      	sub	sp, #40	; 0x28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e10:	f107 0314 	add.w	r3, r7, #20
 8005e14:	2200      	movs	r2, #0
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	605a      	str	r2, [r3, #4]
 8005e1a:	609a      	str	r2, [r3, #8]
 8005e1c:	60da      	str	r2, [r3, #12]
 8005e1e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e28:	d13a      	bne.n	8005ea0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	613b      	str	r3, [r7, #16]
 8005e2e:	4b1e      	ldr	r3, [pc, #120]	; (8005ea8 <HAL_PCD_MspInit+0xa0>)
 8005e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e32:	4a1d      	ldr	r2, [pc, #116]	; (8005ea8 <HAL_PCD_MspInit+0xa0>)
 8005e34:	f043 0301 	orr.w	r3, r3, #1
 8005e38:	6313      	str	r3, [r2, #48]	; 0x30
 8005e3a:	4b1b      	ldr	r3, [pc, #108]	; (8005ea8 <HAL_PCD_MspInit+0xa0>)
 8005e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	613b      	str	r3, [r7, #16]
 8005e44:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005e46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e50:	2300      	movs	r3, #0
 8005e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e54:	2303      	movs	r3, #3
 8005e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005e58:	230a      	movs	r3, #10
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e5c:	f107 0314 	add.w	r3, r7, #20
 8005e60:	4619      	mov	r1, r3
 8005e62:	4812      	ldr	r0, [pc, #72]	; (8005eac <HAL_PCD_MspInit+0xa4>)
 8005e64:	f7fa fe8e 	bl	8000b84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005e68:	4b0f      	ldr	r3, [pc, #60]	; (8005ea8 <HAL_PCD_MspInit+0xa0>)
 8005e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6c:	4a0e      	ldr	r2, [pc, #56]	; (8005ea8 <HAL_PCD_MspInit+0xa0>)
 8005e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e72:	6353      	str	r3, [r2, #52]	; 0x34
 8005e74:	2300      	movs	r3, #0
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	4b0b      	ldr	r3, [pc, #44]	; (8005ea8 <HAL_PCD_MspInit+0xa0>)
 8005e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7c:	4a0a      	ldr	r2, [pc, #40]	; (8005ea8 <HAL_PCD_MspInit+0xa0>)
 8005e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e82:	6453      	str	r3, [r2, #68]	; 0x44
 8005e84:	4b08      	ldr	r3, [pc, #32]	; (8005ea8 <HAL_PCD_MspInit+0xa0>)
 8005e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005e90:	2200      	movs	r2, #0
 8005e92:	2100      	movs	r1, #0
 8005e94:	2043      	movs	r0, #67	; 0x43
 8005e96:	f7fa fe3e 	bl	8000b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005e9a:	2043      	movs	r0, #67	; 0x43
 8005e9c:	f7fa fe57 	bl	8000b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005ea0:	bf00      	nop
 8005ea2:	3728      	adds	r7, #40	; 0x28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	40023800 	.word	0x40023800
 8005eac:	40020000 	.word	0x40020000

08005eb0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	f7fe fcc6 	bl	8004858 <USBD_LL_SetupStage>
}
 8005ecc:	bf00      	nop
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005ee6:	78fa      	ldrb	r2, [r7, #3]
 8005ee8:	6879      	ldr	r1, [r7, #4]
 8005eea:	4613      	mov	r3, r2
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	1a9b      	subs	r3, r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	440b      	add	r3, r1
 8005ef4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	78fb      	ldrb	r3, [r7, #3]
 8005efc:	4619      	mov	r1, r3
 8005efe:	f7fe fcfe 	bl	80048fe <USBD_LL_DataOutStage>
}
 8005f02:	bf00      	nop
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b082      	sub	sp, #8
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	460b      	mov	r3, r1
 8005f14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005f1c:	78fa      	ldrb	r2, [r7, #3]
 8005f1e:	6879      	ldr	r1, [r7, #4]
 8005f20:	4613      	mov	r3, r2
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	1a9b      	subs	r3, r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	440b      	add	r3, r1
 8005f2a:	3348      	adds	r3, #72	; 0x48
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	78fb      	ldrb	r3, [r7, #3]
 8005f30:	4619      	mov	r1, r3
 8005f32:	f7fe fd47 	bl	80049c4 <USBD_LL_DataInStage>
}
 8005f36:	bf00      	nop
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b082      	sub	sp, #8
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fe fe4b 	bl	8004be8 <USBD_LL_SOF>
}
 8005f52:	bf00      	nop
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b084      	sub	sp, #16
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005f62:	2301      	movs	r3, #1
 8005f64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d102      	bne.n	8005f74 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	73fb      	strb	r3, [r7, #15]
 8005f72:	e008      	b.n	8005f86 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d102      	bne.n	8005f82 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	73fb      	strb	r3, [r7, #15]
 8005f80:	e001      	b.n	8005f86 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8005f82:	f7fa fb83 	bl	800068c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f8c:	7bfa      	ldrb	r2, [r7, #15]
 8005f8e:	4611      	mov	r1, r2
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fe fdee 	bl	8004b72 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7fe fda7 	bl	8004af0 <USBD_LL_Reset>
}
 8005fa2:	bf00      	nop
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
	...

08005fac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fe fde9 	bl	8004b92 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6812      	ldr	r2, [r2, #0]
 8005fce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fd2:	f043 0301 	orr.w	r3, r3, #1
 8005fd6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d005      	beq.n	8005fec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005fe0:	4b04      	ldr	r3, [pc, #16]	; (8005ff4 <HAL_PCD_SuspendCallback+0x48>)
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	4a03      	ldr	r2, [pc, #12]	; (8005ff4 <HAL_PCD_SuspendCallback+0x48>)
 8005fe6:	f043 0306 	orr.w	r3, r3, #6
 8005fea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005fec:	bf00      	nop
 8005fee:	3708      	adds	r7, #8
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	e000ed00 	.word	0xe000ed00

08005ff8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006006:	4618      	mov	r0, r3
 8006008:	f7fe fdd8 	bl	8004bbc <USBD_LL_Resume>
}
 800600c:	bf00      	nop
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006026:	78fa      	ldrb	r2, [r7, #3]
 8006028:	4611      	mov	r1, r2
 800602a:	4618      	mov	r0, r3
 800602c:	f7fe fe03 	bl	8004c36 <USBD_LL_IsoOUTIncomplete>
}
 8006030:	bf00      	nop
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800604a:	78fa      	ldrb	r2, [r7, #3]
 800604c:	4611      	mov	r1, r2
 800604e:	4618      	mov	r0, r3
 8006050:	f7fe fde4 	bl	8004c1c <USBD_LL_IsoINIncomplete>
}
 8006054:	bf00      	nop
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800606a:	4618      	mov	r0, r3
 800606c:	f7fe fdf0 	bl	8004c50 <USBD_LL_DevConnected>
}
 8006070:	bf00      	nop
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006086:	4618      	mov	r0, r3
 8006088:	f7fe fded 	bl	8004c66 <USBD_LL_DevDisconnected>
}
 800608c:	bf00      	nop
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d13c      	bne.n	800611e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80060a4:	4a20      	ldr	r2, [pc, #128]	; (8006128 <USBD_LL_Init+0x94>)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a1e      	ldr	r2, [pc, #120]	; (8006128 <USBD_LL_Init+0x94>)
 80060b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80060b4:	4b1c      	ldr	r3, [pc, #112]	; (8006128 <USBD_LL_Init+0x94>)
 80060b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80060ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80060bc:	4b1a      	ldr	r3, [pc, #104]	; (8006128 <USBD_LL_Init+0x94>)
 80060be:	2204      	movs	r2, #4
 80060c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80060c2:	4b19      	ldr	r3, [pc, #100]	; (8006128 <USBD_LL_Init+0x94>)
 80060c4:	2202      	movs	r2, #2
 80060c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80060c8:	4b17      	ldr	r3, [pc, #92]	; (8006128 <USBD_LL_Init+0x94>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80060ce:	4b16      	ldr	r3, [pc, #88]	; (8006128 <USBD_LL_Init+0x94>)
 80060d0:	2202      	movs	r2, #2
 80060d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80060d4:	4b14      	ldr	r3, [pc, #80]	; (8006128 <USBD_LL_Init+0x94>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80060da:	4b13      	ldr	r3, [pc, #76]	; (8006128 <USBD_LL_Init+0x94>)
 80060dc:	2200      	movs	r2, #0
 80060de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80060e0:	4b11      	ldr	r3, [pc, #68]	; (8006128 <USBD_LL_Init+0x94>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80060e6:	4b10      	ldr	r3, [pc, #64]	; (8006128 <USBD_LL_Init+0x94>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80060ec:	4b0e      	ldr	r3, [pc, #56]	; (8006128 <USBD_LL_Init+0x94>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80060f2:	480d      	ldr	r0, [pc, #52]	; (8006128 <USBD_LL_Init+0x94>)
 80060f4:	f7fa ff24 	bl	8000f40 <HAL_PCD_Init>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80060fe:	f7fa fac5 	bl	800068c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006102:	2180      	movs	r1, #128	; 0x80
 8006104:	4808      	ldr	r0, [pc, #32]	; (8006128 <USBD_LL_Init+0x94>)
 8006106:	f7fc f882 	bl	800220e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800610a:	2240      	movs	r2, #64	; 0x40
 800610c:	2100      	movs	r1, #0
 800610e:	4806      	ldr	r0, [pc, #24]	; (8006128 <USBD_LL_Init+0x94>)
 8006110:	f7fc f836 	bl	8002180 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006114:	2280      	movs	r2, #128	; 0x80
 8006116:	2101      	movs	r1, #1
 8006118:	4803      	ldr	r0, [pc, #12]	; (8006128 <USBD_LL_Init+0x94>)
 800611a:	f7fc f831 	bl	8002180 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	200016e4 	.word	0x200016e4

0800612c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006134:	2300      	movs	r3, #0
 8006136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006138:	2300      	movs	r3, #0
 800613a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006142:	4618      	mov	r0, r3
 8006144:	f7fb f819 	bl	800117a <HAL_PCD_Start>
 8006148:	4603      	mov	r3, r0
 800614a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800614c:	7bfb      	ldrb	r3, [r7, #15]
 800614e:	4618      	mov	r0, r3
 8006150:	f000 f92a 	bl	80063a8 <USBD_Get_USB_Status>
 8006154:	4603      	mov	r3, r0
 8006156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006158:	7bbb      	ldrb	r3, [r7, #14]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b084      	sub	sp, #16
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	4608      	mov	r0, r1
 800616c:	4611      	mov	r1, r2
 800616e:	461a      	mov	r2, r3
 8006170:	4603      	mov	r3, r0
 8006172:	70fb      	strb	r3, [r7, #3]
 8006174:	460b      	mov	r3, r1
 8006176:	70bb      	strb	r3, [r7, #2]
 8006178:	4613      	mov	r3, r2
 800617a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800617c:	2300      	movs	r3, #0
 800617e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006180:	2300      	movs	r3, #0
 8006182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800618a:	78bb      	ldrb	r3, [r7, #2]
 800618c:	883a      	ldrh	r2, [r7, #0]
 800618e:	78f9      	ldrb	r1, [r7, #3]
 8006190:	f7fb fbfd 	bl	800198e <HAL_PCD_EP_Open>
 8006194:	4603      	mov	r3, r0
 8006196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	4618      	mov	r0, r3
 800619c:	f000 f904 	bl	80063a8 <USBD_Get_USB_Status>
 80061a0:	4603      	mov	r3, r0
 80061a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	460b      	mov	r3, r1
 80061b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80061c8:	78fa      	ldrb	r2, [r7, #3]
 80061ca:	4611      	mov	r1, r2
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fb fc46 	bl	8001a5e <HAL_PCD_EP_Close>
 80061d2:	4603      	mov	r3, r0
 80061d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 f8e5 	bl	80063a8 <USBD_Get_USB_Status>
 80061de:	4603      	mov	r3, r0
 80061e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	460b      	mov	r3, r1
 80061f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061f8:	2300      	movs	r3, #0
 80061fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061fc:	2300      	movs	r3, #0
 80061fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006206:	78fa      	ldrb	r2, [r7, #3]
 8006208:	4611      	mov	r1, r2
 800620a:	4618      	mov	r0, r3
 800620c:	f7fb fd1e 	bl	8001c4c <HAL_PCD_EP_SetStall>
 8006210:	4603      	mov	r3, r0
 8006212:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006214:	7bfb      	ldrb	r3, [r7, #15]
 8006216:	4618      	mov	r0, r3
 8006218:	f000 f8c6 	bl	80063a8 <USBD_Get_USB_Status>
 800621c:	4603      	mov	r3, r0
 800621e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006220:	7bbb      	ldrb	r3, [r7, #14]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	460b      	mov	r3, r1
 8006234:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006244:	78fa      	ldrb	r2, [r7, #3]
 8006246:	4611      	mov	r1, r2
 8006248:	4618      	mov	r0, r3
 800624a:	f7fb fd63 	bl	8001d14 <HAL_PCD_EP_ClrStall>
 800624e:	4603      	mov	r3, r0
 8006250:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006252:	7bfb      	ldrb	r3, [r7, #15]
 8006254:	4618      	mov	r0, r3
 8006256:	f000 f8a7 	bl	80063a8 <USBD_Get_USB_Status>
 800625a:	4603      	mov	r3, r0
 800625c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800625e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800627a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800627c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006280:	2b00      	cmp	r3, #0
 8006282:	da0b      	bge.n	800629c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800628a:	68f9      	ldr	r1, [r7, #12]
 800628c:	4613      	mov	r3, r2
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	1a9b      	subs	r3, r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	440b      	add	r3, r1
 8006296:	333e      	adds	r3, #62	; 0x3e
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	e00b      	b.n	80062b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062a2:	68f9      	ldr	r1, [r7, #12]
 80062a4:	4613      	mov	r3, r2
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	1a9b      	subs	r3, r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	440b      	add	r3, r1
 80062ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80062b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	460b      	mov	r3, r1
 80062ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062cc:	2300      	movs	r3, #0
 80062ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80062da:	78fa      	ldrb	r2, [r7, #3]
 80062dc:	4611      	mov	r1, r2
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fb fb30 	bl	8001944 <HAL_PCD_SetAddress>
 80062e4:	4603      	mov	r3, r0
 80062e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 f85c 	bl	80063a8 <USBD_Get_USB_Status>
 80062f0:	4603      	mov	r3, r0
 80062f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80062f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b086      	sub	sp, #24
 8006302:	af00      	add	r7, sp, #0
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
 800630a:	460b      	mov	r3, r1
 800630c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006312:	2300      	movs	r3, #0
 8006314:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800631c:	7af9      	ldrb	r1, [r7, #11]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	f7fb fc49 	bl	8001bb8 <HAL_PCD_EP_Transmit>
 8006326:	4603      	mov	r3, r0
 8006328:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800632a:	7dfb      	ldrb	r3, [r7, #23]
 800632c:	4618      	mov	r0, r3
 800632e:	f000 f83b 	bl	80063a8 <USBD_Get_USB_Status>
 8006332:	4603      	mov	r3, r0
 8006334:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006336:	7dbb      	ldrb	r3, [r7, #22]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3718      	adds	r7, #24
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	607a      	str	r2, [r7, #4]
 800634a:	603b      	str	r3, [r7, #0]
 800634c:	460b      	mov	r3, r1
 800634e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006350:	2300      	movs	r3, #0
 8006352:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800635e:	7af9      	ldrb	r1, [r7, #11]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	f7fb fbc5 	bl	8001af2 <HAL_PCD_EP_Receive>
 8006368:	4603      	mov	r3, r0
 800636a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800636c:	7dfb      	ldrb	r3, [r7, #23]
 800636e:	4618      	mov	r0, r3
 8006370:	f000 f81a 	bl	80063a8 <USBD_Get_USB_Status>
 8006374:	4603      	mov	r3, r0
 8006376:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006378:	7dbb      	ldrb	r3, [r7, #22]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	460b      	mov	r3, r1
 800638c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006394:	78fa      	ldrb	r2, [r7, #3]
 8006396:	4611      	mov	r1, r2
 8006398:	4618      	mov	r0, r3
 800639a:	f7fb fbf5 	bl	8001b88 <HAL_PCD_EP_GetRxCount>
 800639e:	4603      	mov	r3, r0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	4603      	mov	r3, r0
 80063b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80063b6:	79fb      	ldrb	r3, [r7, #7]
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	d817      	bhi.n	80063ec <USBD_Get_USB_Status+0x44>
 80063bc:	a201      	add	r2, pc, #4	; (adr r2, 80063c4 <USBD_Get_USB_Status+0x1c>)
 80063be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c2:	bf00      	nop
 80063c4:	080063d5 	.word	0x080063d5
 80063c8:	080063db 	.word	0x080063db
 80063cc:	080063e1 	.word	0x080063e1
 80063d0:	080063e7 	.word	0x080063e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	73fb      	strb	r3, [r7, #15]
    break;
 80063d8:	e00b      	b.n	80063f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80063da:	2303      	movs	r3, #3
 80063dc:	73fb      	strb	r3, [r7, #15]
    break;
 80063de:	e008      	b.n	80063f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80063e0:	2301      	movs	r3, #1
 80063e2:	73fb      	strb	r3, [r7, #15]
    break;
 80063e4:	e005      	b.n	80063f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80063e6:	2303      	movs	r3, #3
 80063e8:	73fb      	strb	r3, [r7, #15]
    break;
 80063ea:	e002      	b.n	80063f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80063ec:	2303      	movs	r3, #3
 80063ee:	73fb      	strb	r3, [r7, #15]
    break;
 80063f0:	bf00      	nop
  }
  return usb_status;
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <__errno>:
 8006400:	4b01      	ldr	r3, [pc, #4]	; (8006408 <__errno+0x8>)
 8006402:	6818      	ldr	r0, [r3, #0]
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	20000180 	.word	0x20000180

0800640c <__libc_init_array>:
 800640c:	b570      	push	{r4, r5, r6, lr}
 800640e:	4e0d      	ldr	r6, [pc, #52]	; (8006444 <__libc_init_array+0x38>)
 8006410:	4c0d      	ldr	r4, [pc, #52]	; (8006448 <__libc_init_array+0x3c>)
 8006412:	1ba4      	subs	r4, r4, r6
 8006414:	10a4      	asrs	r4, r4, #2
 8006416:	2500      	movs	r5, #0
 8006418:	42a5      	cmp	r5, r4
 800641a:	d109      	bne.n	8006430 <__libc_init_array+0x24>
 800641c:	4e0b      	ldr	r6, [pc, #44]	; (800644c <__libc_init_array+0x40>)
 800641e:	4c0c      	ldr	r4, [pc, #48]	; (8006450 <__libc_init_array+0x44>)
 8006420:	f000 f8ea 	bl	80065f8 <_init>
 8006424:	1ba4      	subs	r4, r4, r6
 8006426:	10a4      	asrs	r4, r4, #2
 8006428:	2500      	movs	r5, #0
 800642a:	42a5      	cmp	r5, r4
 800642c:	d105      	bne.n	800643a <__libc_init_array+0x2e>
 800642e:	bd70      	pop	{r4, r5, r6, pc}
 8006430:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006434:	4798      	blx	r3
 8006436:	3501      	adds	r5, #1
 8006438:	e7ee      	b.n	8006418 <__libc_init_array+0xc>
 800643a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800643e:	4798      	blx	r3
 8006440:	3501      	adds	r5, #1
 8006442:	e7f2      	b.n	800642a <__libc_init_array+0x1e>
 8006444:	080066b0 	.word	0x080066b0
 8006448:	080066b0 	.word	0x080066b0
 800644c:	080066b0 	.word	0x080066b0
 8006450:	080066b4 	.word	0x080066b4

08006454 <malloc>:
 8006454:	4b02      	ldr	r3, [pc, #8]	; (8006460 <malloc+0xc>)
 8006456:	4601      	mov	r1, r0
 8006458:	6818      	ldr	r0, [r3, #0]
 800645a:	f000 b861 	b.w	8006520 <_malloc_r>
 800645e:	bf00      	nop
 8006460:	20000180 	.word	0x20000180

08006464 <free>:
 8006464:	4b02      	ldr	r3, [pc, #8]	; (8006470 <free+0xc>)
 8006466:	4601      	mov	r1, r0
 8006468:	6818      	ldr	r0, [r3, #0]
 800646a:	f000 b80b 	b.w	8006484 <_free_r>
 800646e:	bf00      	nop
 8006470:	20000180 	.word	0x20000180

08006474 <memset>:
 8006474:	4402      	add	r2, r0
 8006476:	4603      	mov	r3, r0
 8006478:	4293      	cmp	r3, r2
 800647a:	d100      	bne.n	800647e <memset+0xa>
 800647c:	4770      	bx	lr
 800647e:	f803 1b01 	strb.w	r1, [r3], #1
 8006482:	e7f9      	b.n	8006478 <memset+0x4>

08006484 <_free_r>:
 8006484:	b538      	push	{r3, r4, r5, lr}
 8006486:	4605      	mov	r5, r0
 8006488:	2900      	cmp	r1, #0
 800648a:	d045      	beq.n	8006518 <_free_r+0x94>
 800648c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006490:	1f0c      	subs	r4, r1, #4
 8006492:	2b00      	cmp	r3, #0
 8006494:	bfb8      	it	lt
 8006496:	18e4      	addlt	r4, r4, r3
 8006498:	f000 f8ac 	bl	80065f4 <__malloc_lock>
 800649c:	4a1f      	ldr	r2, [pc, #124]	; (800651c <_free_r+0x98>)
 800649e:	6813      	ldr	r3, [r2, #0]
 80064a0:	4610      	mov	r0, r2
 80064a2:	b933      	cbnz	r3, 80064b2 <_free_r+0x2e>
 80064a4:	6063      	str	r3, [r4, #4]
 80064a6:	6014      	str	r4, [r2, #0]
 80064a8:	4628      	mov	r0, r5
 80064aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064ae:	f000 b8a2 	b.w	80065f6 <__malloc_unlock>
 80064b2:	42a3      	cmp	r3, r4
 80064b4:	d90c      	bls.n	80064d0 <_free_r+0x4c>
 80064b6:	6821      	ldr	r1, [r4, #0]
 80064b8:	1862      	adds	r2, r4, r1
 80064ba:	4293      	cmp	r3, r2
 80064bc:	bf04      	itt	eq
 80064be:	681a      	ldreq	r2, [r3, #0]
 80064c0:	685b      	ldreq	r3, [r3, #4]
 80064c2:	6063      	str	r3, [r4, #4]
 80064c4:	bf04      	itt	eq
 80064c6:	1852      	addeq	r2, r2, r1
 80064c8:	6022      	streq	r2, [r4, #0]
 80064ca:	6004      	str	r4, [r0, #0]
 80064cc:	e7ec      	b.n	80064a8 <_free_r+0x24>
 80064ce:	4613      	mov	r3, r2
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	b10a      	cbz	r2, 80064d8 <_free_r+0x54>
 80064d4:	42a2      	cmp	r2, r4
 80064d6:	d9fa      	bls.n	80064ce <_free_r+0x4a>
 80064d8:	6819      	ldr	r1, [r3, #0]
 80064da:	1858      	adds	r0, r3, r1
 80064dc:	42a0      	cmp	r0, r4
 80064de:	d10b      	bne.n	80064f8 <_free_r+0x74>
 80064e0:	6820      	ldr	r0, [r4, #0]
 80064e2:	4401      	add	r1, r0
 80064e4:	1858      	adds	r0, r3, r1
 80064e6:	4282      	cmp	r2, r0
 80064e8:	6019      	str	r1, [r3, #0]
 80064ea:	d1dd      	bne.n	80064a8 <_free_r+0x24>
 80064ec:	6810      	ldr	r0, [r2, #0]
 80064ee:	6852      	ldr	r2, [r2, #4]
 80064f0:	605a      	str	r2, [r3, #4]
 80064f2:	4401      	add	r1, r0
 80064f4:	6019      	str	r1, [r3, #0]
 80064f6:	e7d7      	b.n	80064a8 <_free_r+0x24>
 80064f8:	d902      	bls.n	8006500 <_free_r+0x7c>
 80064fa:	230c      	movs	r3, #12
 80064fc:	602b      	str	r3, [r5, #0]
 80064fe:	e7d3      	b.n	80064a8 <_free_r+0x24>
 8006500:	6820      	ldr	r0, [r4, #0]
 8006502:	1821      	adds	r1, r4, r0
 8006504:	428a      	cmp	r2, r1
 8006506:	bf04      	itt	eq
 8006508:	6811      	ldreq	r1, [r2, #0]
 800650a:	6852      	ldreq	r2, [r2, #4]
 800650c:	6062      	str	r2, [r4, #4]
 800650e:	bf04      	itt	eq
 8006510:	1809      	addeq	r1, r1, r0
 8006512:	6021      	streq	r1, [r4, #0]
 8006514:	605c      	str	r4, [r3, #4]
 8006516:	e7c7      	b.n	80064a8 <_free_r+0x24>
 8006518:	bd38      	pop	{r3, r4, r5, pc}
 800651a:	bf00      	nop
 800651c:	20000208 	.word	0x20000208

08006520 <_malloc_r>:
 8006520:	b570      	push	{r4, r5, r6, lr}
 8006522:	1ccd      	adds	r5, r1, #3
 8006524:	f025 0503 	bic.w	r5, r5, #3
 8006528:	3508      	adds	r5, #8
 800652a:	2d0c      	cmp	r5, #12
 800652c:	bf38      	it	cc
 800652e:	250c      	movcc	r5, #12
 8006530:	2d00      	cmp	r5, #0
 8006532:	4606      	mov	r6, r0
 8006534:	db01      	blt.n	800653a <_malloc_r+0x1a>
 8006536:	42a9      	cmp	r1, r5
 8006538:	d903      	bls.n	8006542 <_malloc_r+0x22>
 800653a:	230c      	movs	r3, #12
 800653c:	6033      	str	r3, [r6, #0]
 800653e:	2000      	movs	r0, #0
 8006540:	bd70      	pop	{r4, r5, r6, pc}
 8006542:	f000 f857 	bl	80065f4 <__malloc_lock>
 8006546:	4a21      	ldr	r2, [pc, #132]	; (80065cc <_malloc_r+0xac>)
 8006548:	6814      	ldr	r4, [r2, #0]
 800654a:	4621      	mov	r1, r4
 800654c:	b991      	cbnz	r1, 8006574 <_malloc_r+0x54>
 800654e:	4c20      	ldr	r4, [pc, #128]	; (80065d0 <_malloc_r+0xb0>)
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	b91b      	cbnz	r3, 800655c <_malloc_r+0x3c>
 8006554:	4630      	mov	r0, r6
 8006556:	f000 f83d 	bl	80065d4 <_sbrk_r>
 800655a:	6020      	str	r0, [r4, #0]
 800655c:	4629      	mov	r1, r5
 800655e:	4630      	mov	r0, r6
 8006560:	f000 f838 	bl	80065d4 <_sbrk_r>
 8006564:	1c43      	adds	r3, r0, #1
 8006566:	d124      	bne.n	80065b2 <_malloc_r+0x92>
 8006568:	230c      	movs	r3, #12
 800656a:	6033      	str	r3, [r6, #0]
 800656c:	4630      	mov	r0, r6
 800656e:	f000 f842 	bl	80065f6 <__malloc_unlock>
 8006572:	e7e4      	b.n	800653e <_malloc_r+0x1e>
 8006574:	680b      	ldr	r3, [r1, #0]
 8006576:	1b5b      	subs	r3, r3, r5
 8006578:	d418      	bmi.n	80065ac <_malloc_r+0x8c>
 800657a:	2b0b      	cmp	r3, #11
 800657c:	d90f      	bls.n	800659e <_malloc_r+0x7e>
 800657e:	600b      	str	r3, [r1, #0]
 8006580:	50cd      	str	r5, [r1, r3]
 8006582:	18cc      	adds	r4, r1, r3
 8006584:	4630      	mov	r0, r6
 8006586:	f000 f836 	bl	80065f6 <__malloc_unlock>
 800658a:	f104 000b 	add.w	r0, r4, #11
 800658e:	1d23      	adds	r3, r4, #4
 8006590:	f020 0007 	bic.w	r0, r0, #7
 8006594:	1ac3      	subs	r3, r0, r3
 8006596:	d0d3      	beq.n	8006540 <_malloc_r+0x20>
 8006598:	425a      	negs	r2, r3
 800659a:	50e2      	str	r2, [r4, r3]
 800659c:	e7d0      	b.n	8006540 <_malloc_r+0x20>
 800659e:	428c      	cmp	r4, r1
 80065a0:	684b      	ldr	r3, [r1, #4]
 80065a2:	bf16      	itet	ne
 80065a4:	6063      	strne	r3, [r4, #4]
 80065a6:	6013      	streq	r3, [r2, #0]
 80065a8:	460c      	movne	r4, r1
 80065aa:	e7eb      	b.n	8006584 <_malloc_r+0x64>
 80065ac:	460c      	mov	r4, r1
 80065ae:	6849      	ldr	r1, [r1, #4]
 80065b0:	e7cc      	b.n	800654c <_malloc_r+0x2c>
 80065b2:	1cc4      	adds	r4, r0, #3
 80065b4:	f024 0403 	bic.w	r4, r4, #3
 80065b8:	42a0      	cmp	r0, r4
 80065ba:	d005      	beq.n	80065c8 <_malloc_r+0xa8>
 80065bc:	1a21      	subs	r1, r4, r0
 80065be:	4630      	mov	r0, r6
 80065c0:	f000 f808 	bl	80065d4 <_sbrk_r>
 80065c4:	3001      	adds	r0, #1
 80065c6:	d0cf      	beq.n	8006568 <_malloc_r+0x48>
 80065c8:	6025      	str	r5, [r4, #0]
 80065ca:	e7db      	b.n	8006584 <_malloc_r+0x64>
 80065cc:	20000208 	.word	0x20000208
 80065d0:	2000020c 	.word	0x2000020c

080065d4 <_sbrk_r>:
 80065d4:	b538      	push	{r3, r4, r5, lr}
 80065d6:	4c06      	ldr	r4, [pc, #24]	; (80065f0 <_sbrk_r+0x1c>)
 80065d8:	2300      	movs	r3, #0
 80065da:	4605      	mov	r5, r0
 80065dc:	4608      	mov	r0, r1
 80065de:	6023      	str	r3, [r4, #0]
 80065e0:	f7fa f8b4 	bl	800074c <_sbrk>
 80065e4:	1c43      	adds	r3, r0, #1
 80065e6:	d102      	bne.n	80065ee <_sbrk_r+0x1a>
 80065e8:	6823      	ldr	r3, [r4, #0]
 80065ea:	b103      	cbz	r3, 80065ee <_sbrk_r+0x1a>
 80065ec:	602b      	str	r3, [r5, #0]
 80065ee:	bd38      	pop	{r3, r4, r5, pc}
 80065f0:	20001aec 	.word	0x20001aec

080065f4 <__malloc_lock>:
 80065f4:	4770      	bx	lr

080065f6 <__malloc_unlock>:
 80065f6:	4770      	bx	lr

080065f8 <_init>:
 80065f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fa:	bf00      	nop
 80065fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065fe:	bc08      	pop	{r3}
 8006600:	469e      	mov	lr, r3
 8006602:	4770      	bx	lr

08006604 <_fini>:
 8006604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006606:	bf00      	nop
 8006608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660a:	bc08      	pop	{r3}
 800660c:	469e      	mov	lr, r3
 800660e:	4770      	bx	lr
